{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport \"./Divider.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport PlayerHand from \"./PlayerHand\";\nimport { startClient, socket } from \"./ClientManager\";\nimport NoteBook from \"./NoteBook\";\nimport MessageBoard from \"./MessageBoard\";\nimport Masthead from \"./Masthead\";\nimport LoginPage from \"./LoginPage\";\nimport Prompts from \"./Prompts\";\n\nvar COLORS = require(\"./game_data/colors.json\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Store in the App, and passed into children as props\n      actions: [],\n      player_id: 0,\n      character_id: 0,\n      cards: [],\n      turn: \"Other Players Turn\",\n      currentLocationId: 0,\n      currentRoom: \"\",\n      loggedIn: false,\n      username: \"\",\n      chatmessage: Object,\n      setup_messages: [],\n      colorPalette: [COLORS.Blue, COLORS.DarkBlue]\n    };\n\n    this.setUsername = string => {\n      //console.log(\"LoginPage Callback=\" + string);\n      this.setState({\n        username: string\n      }); //console.log(JSON.stringify(this.state));\n    };\n\n    this.handleClickShow = this.handleClickShow.bind(this);\n  }\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", message => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n      this.setState({\n        actions: [message, ...this.state.actions]\n      });\n      var newTurn = this.state.turn;\n\n      if (message.message_type == 1 || message.message_type == 2 || message.message_type == 3 || message.message_type == 4 || message.message_type == 5) {\n        this.setState({\n          setup_messages: [message, ...this.state.setup_messages]\n        });\n      }\n\n      if (message.message_type == 11) {\n        if (message.message.username != undefined) {\n          if (message.message.username != undefined) {\n            if (message.message.username == this.state.username) {\n              //console.log(\"APP: \" + message.message.player_id)\n              //console.log(\"APP: \" + message.message.character)\n              //console.log(\"APP: \" + message.message.cards)\n              this.setState({\n                loggedIn: true,\n                player_id: message.message.player_id,\n                character_id: message.message.character_id,\n                cards: message.message.cards\n              });\n            }\n          }\n        }\n      }\n\n      if (newTurn != \"Revoked\") {\n        if (message.message_type == 31) {\n          newTurn = \"Movement\";\n        } else if (message.message_type == 32) {\n          newTurn = \"Suggestion\";\n        } else if (message.message_type == 33) {\n          newTurn = \"Disprove\";\n        } else if (message.message_type == 34) {\n          newTurn = \"Accusation\";\n        } else if (message.message_type == 52) {\n          //Does 52 need to be send to everyone? To update their notecard\n          if (message.message.accusation_correct === false) {\n            newTurn = \"Revoked\";\n          }\n        } else if (message.message_type == 61) {\n          newTurn = \"End of Game\";\n        } else if (message.message_type == 21) {\n          if (message.message.broadcast_message.indexOf(\"starting their turn\") != 0) {\n            //console.log(\"FOUND\");\n            newTurn = \"Other Players Turn\";\n          }\n        } else {\n          newTurn = \"Other Players Turn\";\n        }\n      }\n\n      this.setState({\n        turn: newTurn\n      });\n    }); // Broadcast Player Message/Chat from Server:\n\n    socket.on(\"chat\", message => {\n      this.setState({\n        chatmessage: message.message\n      });\n      this.setState({\n        actions: [message, ...this.state.actions]\n      });\n    }); // Local Settings Update:\n\n    socket.on(\"theme_change\", message => {\n      var updatedColorPalette = [];\n      updatedColorPalette[0] = message.primaryColor;\n      updatedColorPalette[1] = message.secondaryColor;\n      this.setState({\n        colorPalette: updatedColorPalette\n      });\n      console.log(\"Theme Change Recieved: \" + JSON.stringify(message));\n    });\n  }\n\n  handleClickShow(evt) {\n    //console.log(\"FAKE LOGIN\")\n    this.setState({\n      loggedIn: true\n    });\n  }\n\n  render() {\n    const imgsrc = \"/Clue-Less-Title.png\";\n    let component = this.state.loggedIn ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Masthead, {\n      username: this.state.username,\n      colorPalette: this.state.colorPalette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Prompts, {\n      actions: this.state.actions,\n      cards: this.state.cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Gameboard, {\n      actions: this.state.actions,\n      player_id: this.state.player_id,\n      character_id: this.state.character_id,\n      username: this.state.username,\n      cards: this.state.cards,\n      turn: this.state.turn,\n      changeCurrentLocationId: this.changeCurrentLocationId,\n      changeCurrentRoom: this.changeCurrentRoom,\n      chatmessage: this.state.chatmessage,\n      colorPalette: this.state.colorPalette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleClickShow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, \"Show Gameboard\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(LoginPage, {\n      setup_messages: this.state.setup_messages,\n      setUsername: this.setUsername,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, component);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js"],"names":["React","Divider","Gameboard","PlayerHand","startClient","socket","NoteBook","MessageBoard","Masthead","LoginPage","Prompts","COLORS","require","App","Component","constructor","props","state","actions","player_id","character_id","cards","turn","currentLocationId","currentRoom","loggedIn","username","chatmessage","Object","setup_messages","colorPalette","Blue","DarkBlue","setUsername","string","setState","handleClickShow","bind","componentDidMount","window","location","port","on","message","console","log","JSON","stringify","newTurn","message_type","undefined","accusation_correct","broadcast_message","indexOf","updatedColorPalette","primaryColor","secondaryColor","evt","render","imgsrc","component","changeCurrentLocationId","changeCurrentRoom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"./Divider.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport PlayerHand from \"./PlayerHand\";\nimport { startClient, socket } from \"./ClientManager\";\nimport NoteBook from \"./NoteBook\";\nimport MessageBoard from \"./MessageBoard\";\nimport Masthead from \"./Masthead\";\nimport LoginPage from \"./LoginPage\";\nimport Prompts from \"./Prompts\";\nvar COLORS = require(\"./game_data/colors.json\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClickShow = this.handleClickShow.bind(this);\n  }\n\n  state = {\n    // Store in the App, and passed into children as props\n    actions: [],\n    player_id: 0,\n    character_id: 0,\n    cards: [],\n    turn: \"Other Players Turn\",\n    currentLocationId: 0,\n    currentRoom: \"\",\n    loggedIn: false,\n    username: \"\",\n    chatmessage: Object,\n    setup_messages: [],\n    colorPalette: [COLORS.Blue, COLORS.DarkBlue],\n  };\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", (message) => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n\n      this.setState({ actions: [message, ...this.state.actions] });\n      var newTurn = this.state.turn;\n\n      if (\n        message.message_type == 1 ||\n        message.message_type == 2 ||\n        message.message_type == 3 ||\n        message.message_type == 4 ||\n        message.message_type == 5\n      ) {\n        this.setState({\n          setup_messages: [message, ...this.state.setup_messages],\n        });\n      }\n\n      if (message.message_type == 11) {\n        if (message.message.username != undefined) {\n          if (message.message.username != undefined) {\n            if (message.message.username == this.state.username) {\n              //console.log(\"APP: \" + message.message.player_id)\n              //console.log(\"APP: \" + message.message.character)\n              //console.log(\"APP: \" + message.message.cards)\n              this.setState({\n                loggedIn: true,\n                player_id: message.message.player_id,\n                character_id: message.message.character_id,\n                cards: message.message.cards,\n              });\n            }\n          }\n        }\n      }\n\n      if (newTurn != \"Revoked\") {\n        if (message.message_type == 31) {\n          newTurn = \"Movement\";\n        } else if (message.message_type == 32) {\n          newTurn = \"Suggestion\";\n        } else if (message.message_type == 33) {\n          newTurn = \"Disprove\";\n        } else if (message.message_type == 34) {\n          newTurn = \"Accusation\";\n        } else if (message.message_type == 52) {\n          //Does 52 need to be send to everyone? To update their notecard\n          if (message.message.accusation_correct === false) {\n            newTurn = \"Revoked\";\n          }\n        } else if (message.message_type == 61) {\n          newTurn = \"End of Game\";\n        } else if (message.message_type == 21) {\n          if (\n            message.message.broadcast_message.indexOf(\"starting their turn\") !=\n            0\n          ) {\n            //console.log(\"FOUND\");\n            newTurn = \"Other Players Turn\";\n          }\n        } else {\n          newTurn = \"Other Players Turn\";\n        }\n      }\n\n      this.setState({ turn: newTurn });\n    });\n\n    // Broadcast Player Message/Chat from Server:\n    socket.on(\"chat\", (message) => {\n      this.setState({ chatmessage: message.message });\n      this.setState({ actions: [message, ...this.state.actions] });\n    });\n\n    // Local Settings Update:\n    socket.on(\"theme_change\", (message) => {\n      var updatedColorPalette = [];\n      updatedColorPalette[0] = message.primaryColor;\n      updatedColorPalette[1] = message.secondaryColor;\n      this.setState({\n        colorPalette: updatedColorPalette,\n      });\n      console.log(\"Theme Change Recieved: \" + JSON.stringify(message));\n    });\n  }\n\n  setUsername = (string) => {\n    //console.log(\"LoginPage Callback=\" + string);\n    this.setState({ username: string });\n    //console.log(JSON.stringify(this.state));\n  };\n\n  handleClickShow(evt) {\n    //console.log(\"FAKE LOGIN\")\n    this.setState({ loggedIn: true });\n  }\n\n  render() {\n    const imgsrc = \"/Clue-Less-Title.png\";\n    let component = this.state.loggedIn ? (\n      <div>\n        <Masthead\n          username={this.state.username}\n          colorPalette={this.state.colorPalette}\n        />\n        <Prompts actions={this.state.actions} cards={this.state.cards} />\n        <Gameboard\n          actions={this.state.actions}\n          player_id={this.state.player_id}\n          character_id={this.state.character_id}\n          username={this.state.username}\n          cards={this.state.cards}\n          turn={this.state.turn}\n          changeCurrentLocationId={this.changeCurrentLocationId}\n          changeCurrentRoom={this.changeCurrentRoom}\n          chatmessage={this.state.chatmessage}\n          colorPalette={this.state.colorPalette}\n        />\n      </div>\n    ) : (\n      <div>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <button type=\"submit\" onClick={this.handleClickShow}>\n          Show Gameboard\n        </button>\n        <br></br>\n        <br></br>\n        <LoginPage\n          setup_messages={this.state.setup_messages}\n          setUsername={this.setUsername}\n        />\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        {/* <img src={imgsrc} height=\"50\" width=\"300\" />\n        <p>!{this.state.username}!</p> */}\n        {component}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}