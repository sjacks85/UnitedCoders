{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/UserInput.js\";\nimport React from \"react\";\nimport { makeMovement, makeSuggestion, makeAccusation, makeDisprove } from './ClientManager';\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      response: \"\",\n      inputs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.makeSuggestion = this.makeSuggestion.bind(this); // Use when we have endpoints, and back end logic to work with.\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    if (this.state.value === \"\") {\n      alert(\"Don't forget to type an action!\");\n      return;\n    } // Notify User that their action was registered.\n\n\n    let userInput = this.state.value;\n    this.setState({\n      response: userInput\n    }); //alert(\"Player action registered: \" + this.state.value);\n\n    alert(\"User Input: \" + this.state.value);\n    console.log(\"User Input: \" + this.state.value);\n    this.parseMessage(this.state.value);\n    event.preventDefault();\n  }\n\n  makeSuggestion() {\n    const _this = this; // let jsonBody = '{\"Test\":\"Test\"}';\n    // //console.log(jsonBody);\n    // fetch(\n    //   \"http://node-express-env.eba-m3dz2nxw.us-east-2.elasticbeanstalk.com/test\",\n    //   {\n    //     method: \"GET\",\n    //     withCredentials: true,\n    //     //credentials: \"include\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     //body: jsonBody,\n    //   }\n    // )\n    //   .then((response) => response.json())\n    //   .then((jsonResponse) => {\n    //     console.log(\"Response: \" + JSON.stringify(jsonResponse));\n    //     _this.setState({\n    //       response: JSON.stringify(jsonResponse),\n    //     });\n    //   });\n    // console.log(\"Response: \" + this.state.response);\n\n  }\n\n  parseMessage(playerInput) {\n    let parsedPlayerInput = playerInput.split(/\\s+/); // Can use to differentiate player actions for the back end.\n    // Can place fetch in each block specific to the player action.\n\n    if (parsedPlayerInput[0] === \"Movement:\") {\n      //alert(\"Player Moved to the \" + parsedPlayerInput[1]);\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeMovement(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else if (parsedPlayerInput[0] === \"Suggestion:\") {\n      // alert(\n      //   \"Player suggested that \" +\n      //     parsedPlayerInput[1] +\n      //     \" commited the murder in the \" +\n      //     parsedPlayerInput[2] +\n      //     \" using a \" +\n      //     parsedPlayerInput[3] +\n      //     \"!\"\n      // );\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeSuggestion(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3]);\n    } else if (parsedPlayerInput[0] === \"Accusation:\") {\n      // alert(\n      //   \"Player accused \" +\n      //     parsedPlayerInput[1] +\n      //     \" of committing the murder in the \" +\n      //     parsedPlayerInput[2] +\n      //     \" using a \" +\n      //     parsedPlayerInput[3] +\n      //     \"!\"\n      // );\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeAccusation(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3], parsedPlayerInput[4]);\n    } else if (parsedPlayerInput[0] === \"Disprove:\") {\n      // alert(\n      //   \"Player disproved with card \" +\n      //     parsedPlayerInput[1] + \n      //     \"!\"\n      // );\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeDisprove(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else {\n      alert(\"This move isn't recognized.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      size: \"50\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, \"Last Action Taken = \", this.state.response), \"Inputs\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, this.state.inputs.map(elem => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, JSON.stringify(elem)))));\n  }\n\n}\n\nexport default UserInput;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/UserInput.js"],"names":["React","makeMovement","makeSuggestion","makeAccusation","makeDisprove","UserInput","Component","constructor","props","state","value","response","inputs","handleChange","bind","handleSubmit","event","setState","target","alert","userInput","console","log","parseMessage","preventDefault","_this","playerInput","parsedPlayerInput","split","render","map","elem","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeMovement, makeSuggestion, makeAccusation, makeDisprove } from './ClientManager';\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      response: \"\",\n      inputs: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.makeSuggestion = this.makeSuggestion.bind(this); // Use when we have endpoints, and back end logic to work with.\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    if (this.state.value === \"\") {\n      alert(\"Don't forget to type an action!\");\n      return;\n    }\n\n    // Notify User that their action was registered.\n    let userInput = this.state.value;\n    this.setState({ response: userInput });\n    //alert(\"Player action registered: \" + this.state.value);\n   \n    alert(\"User Input: \" + this.state.value);\n    console.log(\"User Input: \" + this.state.value);\n    this.parseMessage(this.state.value);\n    event.preventDefault();\n  }\n\n  makeSuggestion() {\n    const _this = this;\n\n    // let jsonBody = '{\"Test\":\"Test\"}';\n    // //console.log(jsonBody);\n    // fetch(\n    //   \"http://node-express-env.eba-m3dz2nxw.us-east-2.elasticbeanstalk.com/test\",\n    //   {\n    //     method: \"GET\",\n    //     withCredentials: true,\n    //     //credentials: \"include\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     //body: jsonBody,\n    //   }\n    // )\n    //   .then((response) => response.json())\n    //   .then((jsonResponse) => {\n    //     console.log(\"Response: \" + JSON.stringify(jsonResponse));\n    //     _this.setState({\n    //       response: JSON.stringify(jsonResponse),\n    //     });\n    //   });\n    // console.log(\"Response: \" + this.state.response);\n  }\n\n  parseMessage(playerInput) {\n    let parsedPlayerInput = playerInput.split(/\\s+/);\n\n    // Can use to differentiate player actions for the back end.\n    // Can place fetch in each block specific to the player action.\n    if (parsedPlayerInput[0] === \"Movement:\") {\n      //alert(\"Player Moved to the \" + parsedPlayerInput[1]);\n      this.setState({ inputs : [playerInput, ...this.state.inputs]})\n      makeMovement(parsedPlayerInput[1], parsedPlayerInput[2])\n    } else if (parsedPlayerInput[0] === \"Suggestion:\") {\n      // alert(\n      //   \"Player suggested that \" +\n      //     parsedPlayerInput[1] +\n      //     \" commited the murder in the \" +\n      //     parsedPlayerInput[2] +\n      //     \" using a \" +\n      //     parsedPlayerInput[3] +\n      //     \"!\"\n      // );\n      this.setState({ inputs : [playerInput, ...this.state.inputs]})\n      makeSuggestion(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3])\n    } else if (parsedPlayerInput[0] === \"Accusation:\") {\n      // alert(\n      //   \"Player accused \" +\n      //     parsedPlayerInput[1] +\n      //     \" of committing the murder in the \" +\n      //     parsedPlayerInput[2] +\n      //     \" using a \" +\n      //     parsedPlayerInput[3] +\n      //     \"!\"\n      // );\n      this.setState({ inputs : [playerInput, ...this.state.inputs]})\n      makeAccusation(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3], parsedPlayerInput[4])\n    } else if (parsedPlayerInput[0] === \"Disprove:\") {\n      // alert(\n      //   \"Player disproved with card \" +\n      //     parsedPlayerInput[1] + \n      //     \"!\"\n      // );\n      this.setState({ inputs : [playerInput, ...this.state.inputs]})\n      makeDisprove(parsedPlayerInput[1], parsedPlayerInput[2])\n    } else {\n      alert(\"This move isn't recognized.\");\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            size=\"50\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p> </p>\n        <div>Last Action Taken = {this.state.response}</div>\n        Inputs\n        <ul>\n        {this.state.inputs.map(elem => (\n          <li>{JSON.stringify(elem)}</li>\n        ))}\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\nexport default UserInput;\n"]},"metadata":{},"sourceType":"module"}