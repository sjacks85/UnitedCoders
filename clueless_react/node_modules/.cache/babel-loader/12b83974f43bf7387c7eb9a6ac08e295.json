{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport \"./Divider.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport PlayerHand from \"./PlayerHand\";\nimport { startClient, socket } from \"./ClientManager\";\nimport NoteBook from \"./NoteBook\";\nimport MessageBoard from \"./MessageBoard\";\nimport Masthead from \"./Masthead\";\nimport LoginPage from \"./LoginPage\";\nimport Prompts from \"./Prompts\";\n\nvar COLORS = require(\"./game_data/colors.json\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Store in the App, and passed into children as props\n      actions: [],\n      player_id: 0,\n      character_id: 0,\n      cards: [],\n      turn: \"Other Players Turn\",\n      currentLocationId: 0,\n      currentRoom: \"\",\n      loggedIn: false,\n      username: \"\",\n      chatmessage: Object,\n      setup_messages: [],\n      colorPalette: [COLORS.Blue, COLORS.DarkBlue],\n      revoked: false\n    };\n\n    this.setUsername = string => {\n      //console.log(\"LoginPage Callback=\" + string);\n      this.setState({\n        username: string\n      }); //console.log(JSON.stringify(this.state));\n    };\n\n    this.handleClickShow = this.handleClickShow.bind(this);\n  }\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", message => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n      this.setState({\n        actions: [message, ...this.state.actions]\n      });\n      var newTurn = this.state.turn;\n      var newRevoked = this.state.revoked;\n\n      if (message.message_type == 1 || message.message_type == 2 || message.message_type == 3 || message.message_type == 4 || message.message_type == 5) {\n        this.setState({\n          setup_messages: [message, ...this.state.setup_messages]\n        });\n      }\n\n      if (message.message_type == 11) {\n        if (message.message.username != undefined) {\n          if (message.message.username != undefined) {\n            if (message.message.username == this.state.username) {\n              //console.log(\"APP: \" + message.message.player_id)\n              //console.log(\"APP: \" + message.message.character)\n              //console.log(\"APP: \" + message.message.cards)\n              this.setState({\n                loggedIn: true,\n                player_id: message.message.player_id,\n                character_id: message.message.character_id,\n                cards: message.message.cards\n              });\n            }\n          }\n        }\n      }\n\n      if (message.message_type === 31) {\n        newTurn = \"Movement\";\n      } else if (message.message_type === 32) {\n        newTurn = \"Suggestion\";\n      } else if (message.message_type === 33) {\n        newTurn = \"Disprove\";\n      } else if (message.message_type === 34) {\n        newTurn = \"Accusation\";\n      } else if (message.message_type === 52) {\n        //Does 52 need to be send to everyone? To update their notecard\n        if (message.message.accusation_correct === false) {\n          newTurn = \"Revoked\";\n          newRevoked = true;\n        }\n      } else if (message.message_type === 61) {\n        newTurn = \"End of Game\";\n      } else if (message.message_type === 21) {\n        if (message.message.broadcast_message.indexOf(\"starting their turn\") != 0) {\n          //console.log(\"FOUND\");\n          newTurn = \"Other Players Turn\";\n        }\n      } else {\n        newTurn = \"Other Players Turn\";\n      } // console.log(\"Turn= \" + newTurn + \", Revoked=\" + newRevoked);\n      // console.log(newRevoked === true )\n      // console.log(newTurn !== \"Disprove\")\n\n\n      if (newRevoked === true && newTurn !== \"Disprove\") {\n        newTurn = \"Revoked\"; //console.log(\"APPIF\");\n      } // if (newTurn != \"Revoked\") {\n      //   if (message.message_type == 31) {\n      //     newTurn = \"Movement\";\n      //   } else if (message.message_type == 32) {\n      //     newTurn = \"Suggestion\";\n      //   } else if (message.message_type == 33) {\n      //     newTurn = \"Disprove\";\n      //   } else if (message.message_type == 34) {\n      //     newTurn = \"Accusation\";\n      //   } else if (message.message_type == 52) {\n      //     //Does 52 need to be send to everyone? To update their notecard\n      //     if (message.message.accusation_correct === false) {\n      //       newTurn = \"Revoked\";\n      //       newRevoked = true;\n      //     }\n      //   } else if (message.message_type == 61) {\n      //     newTurn = \"End of Game\";\n      //   } else if (message.message_type == 21) {\n      //     if (\n      //       message.message.broadcast_message.indexOf(\"starting their turn\") !=\n      //       0\n      //     ) {\n      //       //console.log(\"FOUND\");\n      //       newTurn = \"Other Players Turn\";\n      //     }\n      //   } else {\n      //     newTurn = \"Other Players Turn\";\n      //   }\n      // }\n\n\n      this.setState({\n        turn: newTurn,\n        revoked: newRevoked\n      });\n    }); // Broadcast Player Message/Chat from Server:\n\n    socket.on(\"chat\", message => {\n      this.setState({\n        chatmessage: message.message\n      });\n      this.setState({\n        actions: [message, ...this.state.actions]\n      });\n    }); // Local Settings Update:\n\n    socket.on(\"theme_change\", message => {\n      var updatedColorPalette = [];\n      updatedColorPalette[0] = message.primaryColor;\n      updatedColorPalette[1] = message.secondaryColor;\n      this.setState({\n        colorPalette: updatedColorPalette\n      });\n      console.log(\"Theme Change Recieved: \" + JSON.stringify(message));\n    });\n  }\n\n  handleClickShow(evt) {\n    //console.log(\"FAKE LOGIN\")\n    this.setState({\n      loggedIn: true\n    });\n  }\n\n  render() {\n    const imgsrc = \"/Clue-Less-Title.png\";\n    let component = this.state.loggedIn ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Masthead, {\n      username: this.state.username,\n      colorPalette: this.state.colorPalette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Prompts, {\n      actions: this.state.actions,\n      cards: this.state.cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Gameboard, {\n      actions: this.state.actions,\n      player_id: this.state.player_id,\n      character_id: this.state.character_id,\n      username: this.state.username,\n      cards: this.state.cards,\n      turn: this.state.turn,\n      changeCurrentLocationId: this.changeCurrentLocationId,\n      changeCurrentRoom: this.changeCurrentRoom,\n      chatmessage: this.state.chatmessage,\n      colorPalette: this.state.colorPalette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(LoginPage, {\n      setup_messages: this.state.setup_messages,\n      setUsername: this.setUsername,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 7\n      }\n    }, component);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js"],"names":["React","Divider","Gameboard","PlayerHand","startClient","socket","NoteBook","MessageBoard","Masthead","LoginPage","Prompts","COLORS","require","App","Component","constructor","props","state","actions","player_id","character_id","cards","turn","currentLocationId","currentRoom","loggedIn","username","chatmessage","Object","setup_messages","colorPalette","Blue","DarkBlue","revoked","setUsername","string","setState","handleClickShow","bind","componentDidMount","window","location","port","on","message","console","log","JSON","stringify","newTurn","newRevoked","message_type","undefined","accusation_correct","broadcast_message","indexOf","updatedColorPalette","primaryColor","secondaryColor","evt","render","imgsrc","component","changeCurrentLocationId","changeCurrentRoom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"./Divider.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport PlayerHand from \"./PlayerHand\";\nimport { startClient, socket } from \"./ClientManager\";\nimport NoteBook from \"./NoteBook\";\nimport MessageBoard from \"./MessageBoard\";\nimport Masthead from \"./Masthead\";\nimport LoginPage from \"./LoginPage\";\nimport Prompts from \"./Prompts\";\nvar COLORS = require(\"./game_data/colors.json\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClickShow = this.handleClickShow.bind(this);\n  }\n\n  state = {\n    // Store in the App, and passed into children as props\n    actions: [],\n    player_id: 0,\n    character_id: 0,\n    cards: [],\n    turn: \"Other Players Turn\",\n    currentLocationId: 0,\n    currentRoom: \"\",\n    loggedIn: false,\n    username: \"\",\n    chatmessage: Object,\n    setup_messages: [],\n    colorPalette: [COLORS.Blue, COLORS.DarkBlue],\n    revoked: false,\n  };\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", (message) => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n\n      this.setState({ actions: [message, ...this.state.actions] });\n      var newTurn = this.state.turn;\n      var newRevoked = this.state.revoked;\n\n      if (\n        message.message_type == 1 ||\n        message.message_type == 2 ||\n        message.message_type == 3 ||\n        message.message_type == 4 ||\n        message.message_type == 5\n      ) {\n        this.setState({\n          setup_messages: [message, ...this.state.setup_messages],\n        });\n      }\n\n      if (message.message_type == 11) {\n        if (message.message.username != undefined) {\n          if (message.message.username != undefined) {\n            if (message.message.username == this.state.username) {\n              //console.log(\"APP: \" + message.message.player_id)\n              //console.log(\"APP: \" + message.message.character)\n              //console.log(\"APP: \" + message.message.cards)\n              this.setState({\n                loggedIn: true,\n                player_id: message.message.player_id,\n                character_id: message.message.character_id,\n                cards: message.message.cards,\n              });\n            }\n          }\n        }\n      }\n\n      if (message.message_type === 31) {\n        newTurn = \"Movement\";\n      } else if (message.message_type === 32) {\n        newTurn = \"Suggestion\";\n      } else if (message.message_type === 33) {\n        newTurn = \"Disprove\";\n      } else if (message.message_type === 34) {\n        newTurn = \"Accusation\";\n      } else if (message.message_type === 52) {\n        //Does 52 need to be send to everyone? To update their notecard\n        if (message.message.accusation_correct === false) {\n          newTurn = \"Revoked\";\n          newRevoked = true;\n        }\n      } else if (message.message_type === 61) {\n        newTurn = \"End of Game\";\n      } else if (message.message_type === 21) {\n        if (\n          message.message.broadcast_message.indexOf(\"starting their turn\") != 0\n        ) {\n          //console.log(\"FOUND\");\n          newTurn = \"Other Players Turn\";\n        }\n      } else {\n        newTurn = \"Other Players Turn\";\n      }\n      // console.log(\"Turn= \" + newTurn + \", Revoked=\" + newRevoked);\n      // console.log(newRevoked === true )\n      // console.log(newTurn !== \"Disprove\")\n\n      if (newRevoked === true && newTurn !== \"Disprove\") {\n        newTurn = \"Revoked\";\n        //console.log(\"APPIF\");\n      }\n\n      // if (newTurn != \"Revoked\") {\n      //   if (message.message_type == 31) {\n      //     newTurn = \"Movement\";\n      //   } else if (message.message_type == 32) {\n      //     newTurn = \"Suggestion\";\n      //   } else if (message.message_type == 33) {\n      //     newTurn = \"Disprove\";\n      //   } else if (message.message_type == 34) {\n      //     newTurn = \"Accusation\";\n      //   } else if (message.message_type == 52) {\n      //     //Does 52 need to be send to everyone? To update their notecard\n      //     if (message.message.accusation_correct === false) {\n      //       newTurn = \"Revoked\";\n      //       newRevoked = true;\n      //     }\n      //   } else if (message.message_type == 61) {\n      //     newTurn = \"End of Game\";\n      //   } else if (message.message_type == 21) {\n      //     if (\n      //       message.message.broadcast_message.indexOf(\"starting their turn\") !=\n      //       0\n      //     ) {\n      //       //console.log(\"FOUND\");\n      //       newTurn = \"Other Players Turn\";\n      //     }\n      //   } else {\n      //     newTurn = \"Other Players Turn\";\n      //   }\n      // }\n\n      this.setState({ turn: newTurn, revoked: newRevoked });\n    });\n\n    // Broadcast Player Message/Chat from Server:\n    socket.on(\"chat\", (message) => {\n      this.setState({ chatmessage: message.message });\n      this.setState({ actions: [message, ...this.state.actions] });\n    });\n\n    // Local Settings Update:\n    socket.on(\"theme_change\", (message) => {\n      var updatedColorPalette = [];\n      updatedColorPalette[0] = message.primaryColor;\n      updatedColorPalette[1] = message.secondaryColor;\n      this.setState({\n        colorPalette: updatedColorPalette,\n      });\n      console.log(\"Theme Change Recieved: \" + JSON.stringify(message));\n    });\n  }\n\n  setUsername = (string) => {\n    //console.log(\"LoginPage Callback=\" + string);\n    this.setState({ username: string });\n    //console.log(JSON.stringify(this.state));\n  };\n\n  handleClickShow(evt) {\n    //console.log(\"FAKE LOGIN\")\n    this.setState({ loggedIn: true });\n  }\n\n  render() {\n    const imgsrc = \"/Clue-Less-Title.png\";\n    let component = this.state.loggedIn ? (\n      <div>\n        <Masthead\n          username={this.state.username}\n          colorPalette={this.state.colorPalette}\n        />\n        <Prompts actions={this.state.actions} cards={this.state.cards} />\n        <Gameboard\n          actions={this.state.actions}\n          player_id={this.state.player_id}\n          character_id={this.state.character_id}\n          username={this.state.username}\n          cards={this.state.cards}\n          turn={this.state.turn}\n          changeCurrentLocationId={this.changeCurrentLocationId}\n          changeCurrentRoom={this.changeCurrentRoom}\n          chatmessage={this.state.chatmessage}\n          colorPalette={this.state.colorPalette}\n        />\n      </div>\n    ) : (\n      <div>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        {/* <button type=\"submit\" onClick={this.handleClickShow}>\n          Show Gameboard\n        </button> */}\n        <br></br>\n        <br></br>\n        <LoginPage\n          setup_messages={this.state.setup_messages}\n          setUsername={this.setUsername}\n        />\n      </div>\n    );\n\n    return (\n      <div className=\"App\">\n        {/* <img src={imgsrc} height=\"50\" width=\"300\" />\n        <p>!{this.state.username}!</p> */}\n        {component}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}