{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/Gameboard.js\";\nimport React from \"react\";\nimport './Gameboard.css';\nimport Gameboard_Players from \"./Gameboard_Players\";\nimport { subscribeToTimer, subscribeToMessage, subscribeToArray, subscribeToCards, subscribeToTurn, subscribeToMovement, subscribeToSuggestion, subscribeToDisprove, subscribeToAccusation, subscribeToGame } from './Api'; // class MessageBoard extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     subscribeToAllMessages((err, x) =>\n//       this.setState({ array : x }));\n//   }\n//   state = {\n//     array: []\n//   };\n// render() {\n//   return (\n//         <ul>\n//         {this.state.array.map(elem => (\n//           <li>{elem}</li>\n//         ))}\n//         </ul>\n//   );\n// }\n// }\n// subscribeToCards((err, elem) =>\n//   this.updateArray('Cards info: ' + JSON.stringify(elem)));\n// subscribeToTurn((err, elem) =>\n//   this.updateArray('Turn request:' + elem));\n// subscribeToGame((err, elem) =>\n//   this.updateArray('Game message: ' + JSON.stringify(elem)));\n// subscribeToMovement((err, elem) =>\n//   this.updateArray('Movement request: ' + elem))\n// subscribeToSuggestion((err, elem) =>\n//   this.updateArray('Suggestion request: ' + elem))\n// subscribeToDisprove((err, elem) =>\n//   this.updateArray('Disprove request: ' + JSON.stringify(elem)))\n// subscribeToAccusation((err, elem) =>\n//   this.updateArray('Accustation request: ' + elem))\n\nclass Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: []\n    };\n    this.state = {\n      actions: this.props.actions\n    };\n  }\n\n  // updateArray(elem) {\n  //   this.setState({ actions : [elem, ...this.state.actions] })\n  // }\n  join() {\n    //TODO: Call Server to Join - Init Web Socket\n    $(\"#joindiv\").hide();\n    $(\"#startdiv\").show();\n  } //TODO : Call when server sent signal to start game. Currently I have onclick event do it manually on waiting image. You may find it in Div with ID 'startdiv'\n\n\n  start() {\n    //TODO :  Server should send my player id with start message. by doing that we need to set  myid= 'P1' or 'P2' or 'P3' or 'P4' or 'P5' or 'P6' . You may use SetUser function that I prepared.\n    $(\"#startdiv\").hide();\n    var roomidx = -1;\n\n    for (roomidx = 0; roomidx < 21; roomidx++) {\n      RenderRoom(roomCode[roomidx]);\n    } //MY Cards\n    //TODO :  This part should be replaced with server call. I put this code here for testing purposes. These are not random selected cards.\n    // S1 to S6  Players\n    // C1 to C6  Weapons\n    // H11 , H12 , H13 , H21 , H22 , H23 , H31 , H32 , H33   Rooms\n\n\n    ShowMyCard('S1');\n    ShowMyCard('S2');\n    ShowMyCard('S3');\n    ShowMyCard('S4');\n    ShowMyCard('S5');\n    ShowMyCard('S6');\n    ShowMyCard('C1');\n    ShowMyCard('C5');\n    ShowMyCard('H11');\n    ShowMyCard('H22');\n    ShowMyCard('H33'); //Let GUI knows knows game started\n\n    started = true;\n  }\n\n  render() {\n    //console.log('MessageState:' + this.state.actions)\n    //console.log('MessageProps:' + this.props.actions)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"joindiv\",\n      class: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"ajax-loader\",\n      onclick: \"join();\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 39\n      }\n    }, \"Join\"), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"startdiv\",\n      class: \"overlay2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      class: \"ajax-loader2\",\n      src: \"Wait.gif\",\n      onclick: \"start();\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 107\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Gameboard_Players, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    })));\n  }\n\n}\n\nexport default Gameboard;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/Gameboard.js"],"names":["React","Gameboard_Players","subscribeToTimer","subscribeToMessage","subscribeToArray","subscribeToCards","subscribeToTurn","subscribeToMovement","subscribeToSuggestion","subscribeToDisprove","subscribeToAccusation","subscribeToGame","Gameboard","Component","constructor","props","state","actions","join","$","hide","show","start","roomidx","RenderRoom","roomCode","ShowMyCard","started","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,SAASC,gBAAT,EAA2BC,kBAA3B,EAA+CC,gBAA/C,EAAiEC,gBAAjE,EAAmFC,eAAnF,EACEC,mBADF,EACuBC,qBADvB,EAC8CC,mBAD9C,EACmEC,qBADnE,EAC0FC,eAD1F,QACiH,OADjH,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGJ,MAAMC,SAAN,SAAwBZ,KAAK,CAACa,SAA9B,CAAwC;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAMnBC,KANmB,GAMX;AACNC,MAAAA,OAAO,EAAE;AADH,KANW;AAEjB,SAAKD,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE;AADT,KAAb;AAGD;;AAKD;AACA;AACA;AACAC,EAAAA,IAAI,GAAE;AACJ;AACAC,IAAAA,CAAC,CAAC,UAAD,CAAD,CAAcC,IAAd;AAEAD,IAAAA,CAAC,CAAC,WAAD,CAAD,CAAeE,IAAf;AACH,GApBuC,CAuBxC;;;AACAC,EAAAA,KAAK,GAAE;AACH;AAEAH,IAAAA,CAAC,CAAC,WAAD,CAAD,CAAeC,IAAf;AACA,QAAIG,OAAO,GAAC,CAAC,CAAb;;AACA,SAAIA,OAAO,GAAC,CAAZ,EAAcA,OAAO,GAAC,EAAtB,EAAyBA,OAAO,EAAhC,EAAmC;AAC/BC,MAAAA,UAAU,CAAEC,QAAQ,CAACF,OAAD,CAAV,CAAV;AACH,KAPE,CASH;AACA;AACA;AACA;AACA;;;AACAG,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAA,IAAAA,UAAU,CAAC,KAAD,CAAV,CAxBG,CA0BH;;AACAC,IAAAA,OAAO,GAAC,IAAR;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,KAAK,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkC;AAAQ,MAAA,KAAK,EAAC,aAAd;AAA4B,MAAA,OAAO,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlC,MADA,eAEA;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,KAAK,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoC;AAAK,MAAA,KAAK,EAAC,cAAX;AAA0B,MAAA,GAAG,EAAC,UAA9B;AAAyC,MAAA,OAAO,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApC,eAAsG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtG,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHA,CADF;AASD;;AAnEuC;;AAsExC,eAAehB,SAAf","sourcesContent":["import React from \"react\";\nimport './Gameboard.css';\nimport Gameboard_Players from \"./Gameboard_Players\";\n\nimport { subscribeToTimer, subscribeToMessage, subscribeToArray, subscribeToCards, subscribeToTurn,\n  subscribeToMovement, subscribeToSuggestion, subscribeToDisprove, subscribeToAccusation, subscribeToGame } from './Api';\n\n\n// class MessageBoard extends React.Component {\n\n//   constructor(props) {\n//     super(props);\n//     subscribeToAllMessages((err, x) =>\n//       this.setState({ array : x }));\n//   }\n//   state = {\n//     array: []\n//   };\n\n// render() {\n//   return (\n//         <ul>\n//         {this.state.array.map(elem => (\n//           <li>{elem}</li>\n//         ))}\n//         </ul>\n//   );\n// }\n// }\n\n    // subscribeToCards((err, elem) =>\n    //   this.updateArray('Cards info: ' + JSON.stringify(elem)));\n    // subscribeToTurn((err, elem) =>\n    //   this.updateArray('Turn request:' + elem));\n    // subscribeToGame((err, elem) =>\n    //   this.updateArray('Game message: ' + JSON.stringify(elem)));\n    // subscribeToMovement((err, elem) =>\n    //   this.updateArray('Movement request: ' + elem))\n    // subscribeToSuggestion((err, elem) =>\n    //   this.updateArray('Suggestion request: ' + elem))\n    // subscribeToDisprove((err, elem) =>\n    //   this.updateArray('Disprove request: ' + JSON.stringify(elem)))\n    // subscribeToAccusation((err, elem) =>\n    //   this.updateArray('Accustation request: ' + elem))\n\n\nclass Gameboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: this.props.actions\n    };\n  }\n  state = {\n    actions: []\n  };\n\n  // updateArray(elem) {\n  //   this.setState({ actions : [elem, ...this.state.actions] })\n  // }\n  join(){\n    //TODO: Call Server to Join - Init Web Socket\n    $(\"#joindiv\").hide();\n\n    $(\"#startdiv\").show();\n}\n\n\n//TODO : Call when server sent signal to start game. Currently I have onclick event do it manually on waiting image. You may find it in Div with ID 'startdiv'\nstart(){\n    //TODO :  Server should send my player id with start message. by doing that we need to set  myid= 'P1' or 'P2' or 'P3' or 'P4' or 'P5' or 'P6' . You may use SetUser function that I prepared.\n\n    $(\"#startdiv\").hide();\n    var roomidx=-1;\n    for(roomidx=0;roomidx<21;roomidx++){\n        RenderRoom( roomCode[roomidx]);\n    }\n\n    //MY Cards\n    //TODO :  This part should be replaced with server call. I put this code here for testing purposes. These are not random selected cards.\n    // S1 to S6  Players\n    // C1 to C6  Weapons\n    // H11 , H12 , H13 , H21 , H22 , H23 , H31 , H32 , H33   Rooms\n    ShowMyCard('S1');\n    ShowMyCard('S2');\n    ShowMyCard('S3');\n    ShowMyCard('S4');\n    ShowMyCard('S5');\n    ShowMyCard('S6');\n    ShowMyCard('C1');\n    ShowMyCard('C5');\n    ShowMyCard('H11');\n    ShowMyCard('H22');\n    ShowMyCard('H33');\n\n    //Let GUI knows knows game started\n    started=true;\n}\n\nrender() {\n  //console.log('MessageState:' + this.state.actions)\n  //console.log('MessageProps:' + this.props.actions)\n\n  return (\n    <div>\n    <div id=\"joindiv\" class=\"overlay\"><button class=\"ajax-loader\" onclick=\"join();\">Join</button> </div>\n    <div id=\"startdiv\" class=\"overlay2\"><img class=\"ajax-loader2\" src=\"Wait.gif\" onclick=\"start();\"></img><br/> </div>\n    <div>\n      <Gameboard_Players />\n    </div>\n    </div>\n  );\n}\n}\n\nexport default Gameboard;\n"]},"metadata":{},"sourceType":"module"}