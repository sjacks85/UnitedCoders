{"ast":null,"code":"'use strict'; // this file handles outputting usage instructions,\n// failures, etc. keeps logging in one place.\n\nconst decamelize = require('./decamelize');\n\nconst stringWidth = require('string-width');\n\nconst objFilter = require('./obj-filter');\n\nconst path = require('path');\n\nconst setBlocking = require('set-blocking');\n\nconst YError = require('./yerror');\n\nmodule.exports = function usage(yargs, y18n) {\n  const __ = y18n.__;\n  const self = {}; // methods for ouputting/building failure message.\n\n  const fails = [];\n\n  self.failFn = function failFn(f) {\n    fails.push(f);\n  };\n\n  let failMessage = null;\n  let showHelpOnFail = true;\n\n  self.showHelpOnFail = function showHelpOnFailFn(enabled, message) {\n    if (typeof enabled === 'string') {\n      message = enabled;\n      enabled = true;\n    } else if (typeof enabled === 'undefined') {\n      enabled = true;\n    }\n\n    failMessage = message;\n    showHelpOnFail = enabled;\n    return self;\n  };\n\n  let failureOutput = false;\n\n  self.fail = function fail(msg, err) {\n    const logger = yargs._getLoggerInstance();\n\n    if (fails.length) {\n      for (let i = fails.length - 1; i >= 0; --i) {\n        fails[i](msg, err, self);\n      }\n    } else {\n      if (yargs.getExitProcess()) setBlocking(true); // don't output failure message more than once\n\n      if (!failureOutput) {\n        failureOutput = true;\n\n        if (showHelpOnFail) {\n          yargs.showHelp('error');\n          logger.error();\n        }\n\n        if (msg || err) logger.error(msg || err);\n\n        if (failMessage) {\n          if (msg || err) logger.error('');\n          logger.error(failMessage);\n        }\n      }\n\n      err = err || new YError(msg);\n\n      if (yargs.getExitProcess()) {\n        return yargs.exit(1);\n      } else if (yargs._hasParseCallback()) {\n        return yargs.exit(1, err);\n      } else {\n        throw err;\n      }\n    }\n  }; // methods for ouputting/building help (usage) message.\n\n\n  let usages = [];\n  let usageDisabled = false;\n\n  self.usage = (msg, description) => {\n    if (msg === null) {\n      usageDisabled = true;\n      usages = [];\n      return;\n    }\n\n    usageDisabled = false;\n    usages.push([msg, description || '']);\n    return self;\n  };\n\n  self.getUsage = () => {\n    return usages;\n  };\n\n  self.getUsageDisabled = () => {\n    return usageDisabled;\n  };\n\n  self.getPositionalGroupName = () => {\n    return __('Positionals:');\n  };\n\n  let examples = [];\n\n  self.example = (cmd, description) => {\n    examples.push([cmd, description || '']);\n  };\n\n  let commands = [];\n\n  self.command = function command(cmd, description, isDefault, aliases) {\n    // the last default wins, so cancel out any previously set default\n    if (isDefault) {\n      commands = commands.map(cmdArray => {\n        cmdArray[2] = false;\n        return cmdArray;\n      });\n    }\n\n    commands.push([cmd, description || '', isDefault, aliases]);\n  };\n\n  self.getCommands = () => commands;\n\n  let descriptions = {};\n\n  self.describe = function describe(key, desc) {\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.describe(k, key[k]);\n      });\n    } else {\n      descriptions[key] = desc;\n    }\n  };\n\n  self.getDescriptions = () => descriptions;\n\n  let epilog;\n\n  self.epilog = msg => {\n    epilog = msg;\n  };\n\n  let wrapSet = false;\n  let wrap;\n\n  self.wrap = cols => {\n    wrapSet = true;\n    wrap = cols;\n  };\n\n  function getWrap() {\n    if (!wrapSet) {\n      wrap = windowWidth();\n      wrapSet = true;\n    }\n\n    return wrap;\n  }\n\n  const deferY18nLookupPrefix = '__yargsString__:';\n\n  self.deferY18nLookup = str => deferY18nLookupPrefix + str;\n\n  const defaultGroup = 'Options:';\n\n  self.help = function help() {\n    normalizeAliases(); // handle old demanded API\n\n    const base$0 = path.basename(yargs.$0);\n    const demandedOptions = yargs.getDemandedOptions();\n    const demandedCommands = yargs.getDemandedCommands();\n    const groups = yargs.getGroups();\n    const options = yargs.getOptions();\n    let keys = [];\n    keys = keys.concat(Object.keys(descriptions));\n    keys = keys.concat(Object.keys(demandedOptions));\n    keys = keys.concat(Object.keys(demandedCommands));\n    keys = keys.concat(Object.keys(options.default));\n    keys = keys.filter(filterHiddenOptions);\n    keys = Object.keys(keys.reduce((acc, key) => {\n      if (key !== '_') acc[key] = true;\n      return acc;\n    }, {}));\n    const theWrap = getWrap();\n\n    const ui = require('cliui')({\n      width: theWrap,\n      wrap: !!theWrap\n    }); // the usage string.\n\n\n    if (!usageDisabled) {\n      if (usages.length) {\n        // user-defined usage.\n        usages.forEach(usage => {\n          ui.div(`${usage[0].replace(/\\$0/g, base$0)}`);\n\n          if (usage[1]) {\n            ui.div({\n              text: `${usage[1]}`,\n              padding: [1, 0, 0, 0]\n            });\n          }\n        });\n        ui.div();\n      } else if (commands.length) {\n        let u = null; // demonstrate how commands are used.\n\n        if (demandedCommands._) {\n          u = `${base$0} <${__('command')}>\\n`;\n        } else {\n          u = `${base$0} [${__('command')}]\\n`;\n        }\n\n        ui.div(`${u}`);\n      }\n    } // your application's commands, i.e., non-option\n    // arguments populated in '_'.\n\n\n    if (commands.length) {\n      ui.div(__('Commands:'));\n      const context = yargs.getContext();\n      const parentCommands = context.commands.length ? `${context.commands.join(' ')} ` : '';\n\n      if (yargs.getParserConfiguration()['sort-commands'] === true) {\n        commands = commands.sort((a, b) => a[0].localeCompare(b[0]));\n      }\n\n      commands.forEach(command => {\n        const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}`; // drop $0 from default commands.\n\n        ui.span({\n          text: commandString,\n          padding: [0, 2, 0, 2],\n          width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4\n        }, {\n          text: command[1]\n        });\n        const hints = [];\n        if (command[2]) hints.push(`[${__('default:').slice(0, -1)}]`); // TODO hacking around i18n here\n\n        if (command[3] && command[3].length) {\n          hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`);\n        }\n\n        if (hints.length) {\n          ui.div({\n            text: hints.join(' '),\n            padding: [0, 0, 0, 2],\n            align: 'right'\n          });\n        } else {\n          ui.div();\n        }\n      });\n      ui.div();\n    } // perform some cleanup on the keys array, making it\n    // only include top-level keys not their aliases.\n\n\n    const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);\n    keys = keys.filter(key => !yargs.parsed.newAliases[key] && aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1)); // populate 'Options:' group with any keys that have not\n    // explicitly had a group set.\n\n    if (!groups[defaultGroup]) groups[defaultGroup] = [];\n    addUngroupedKeys(keys, options.alias, groups); // display 'Options:' table along with any custom tables:\n\n    Object.keys(groups).forEach(groupName => {\n      if (!groups[groupName].length) return; // if we've grouped the key 'f', but 'f' aliases 'foobar',\n      // normalizedKeys should contain only 'foobar'.\n\n      const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map(key => {\n        if (~aliasKeys.indexOf(key)) return key;\n\n        for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n          if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey;\n        }\n\n        return key;\n      });\n      if (normalizedKeys.length < 1) return;\n      ui.div(__(groupName)); // actually generate the switches string --foo, -f, --bar.\n\n      const switches = normalizedKeys.reduce((acc, key) => {\n        acc[key] = [key].concat(options.alias[key] || []).map(sw => {\n          // for the special positional group don't\n          // add '--' or '-' prefix.\n          if (groupName === self.getPositionalGroupName()) return sw;else return (sw.length > 1 ? '--' : '-') + sw;\n        }).join(', ');\n        return acc;\n      }, {});\n      normalizedKeys.forEach(key => {\n        const kswitch = switches[key];\n        let desc = descriptions[key] || '';\n        let type = null;\n        if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length));\n        if (~options.boolean.indexOf(key)) type = `[${__('boolean')}]`;\n        if (~options.count.indexOf(key)) type = `[${__('count')}]`;\n        if (~options.string.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.normalize.indexOf(key)) type = `[${__('string')}]`;\n        if (~options.array.indexOf(key)) type = `[${__('array')}]`;\n        if (~options.number.indexOf(key)) type = `[${__('number')}]`;\n        const extra = [type, key in demandedOptions ? `[${__('required')}]` : null, options.choices && options.choices[key] ? `[${__('choices:')} ${self.stringifiedValues(options.choices[key])}]` : null, defaultString(options.default[key], options.defaultDescription[key])].filter(Boolean).join(' ');\n        ui.span({\n          text: kswitch,\n          padding: [0, 2, 0, 2],\n          width: maxWidth(switches, theWrap) + 4\n        }, desc);\n        if (extra) ui.div({\n          text: extra,\n          padding: [0, 0, 0, 2],\n          align: 'right'\n        });else ui.div();\n      });\n      ui.div();\n    }); // describe some common use-cases for your application.\n\n    if (examples.length) {\n      ui.div(__('Examples:'));\n      examples.forEach(example => {\n        example[0] = example[0].replace(/\\$0/g, base$0);\n      });\n      examples.forEach(example => {\n        if (example[1] === '') {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2]\n          });\n        } else {\n          ui.div({\n            text: example[0],\n            padding: [0, 2, 0, 2],\n            width: maxWidth(examples, theWrap) + 4\n          }, {\n            text: example[1]\n          });\n        }\n      });\n      ui.div();\n    } // the usage string.\n\n\n    if (epilog) {\n      const e = epilog.replace(/\\$0/g, base$0);\n      ui.div(`${e}\\n`);\n    } // Remove the trailing white spaces\n\n\n    return ui.toString().replace(/\\s*$/, '');\n  }; // return the maximum width of a string\n  // in the left-hand column of a table.\n\n\n  function maxWidth(table, theWrap, modifier) {\n    let width = 0; // table might be of the form [leftColumn],\n    // or {key: leftColumn}\n\n    if (!Array.isArray(table)) {\n      table = Object.keys(table).map(key => [table[key]]);\n    }\n\n    table.forEach(v => {\n      width = Math.max(stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]), width);\n    }); // if we've enabled 'wrap' we should limit\n    // the max-width of the left-column.\n\n    if (theWrap) width = Math.min(width, parseInt(theWrap * 0.5, 10));\n    return width;\n  } // make sure any options set for aliases,\n  // are copied to the keys being aliased.\n\n\n  function normalizeAliases() {\n    // handle old demanded API\n    const demandedOptions = yargs.getDemandedOptions();\n    const options = yargs.getOptions();\n    (Object.keys(options.alias) || []).forEach(key => {\n      options.alias[key].forEach(alias => {\n        // copy descriptions.\n        if (descriptions[alias]) self.describe(key, descriptions[alias]); // copy demanded.\n\n        if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias]); // type messages.\n\n        if (~options.boolean.indexOf(alias)) yargs.boolean(key);\n        if (~options.count.indexOf(alias)) yargs.count(key);\n        if (~options.string.indexOf(alias)) yargs.string(key);\n        if (~options.normalize.indexOf(alias)) yargs.normalize(key);\n        if (~options.array.indexOf(alias)) yargs.array(key);\n        if (~options.number.indexOf(alias)) yargs.number(key);\n      });\n    });\n  } // given a set of keys, place any keys that are\n  // ungrouped under the 'Options:' grouping.\n\n\n  function addUngroupedKeys(keys, aliases, groups) {\n    let groupedKeys = [];\n    let toCheck = null;\n    Object.keys(groups).forEach(group => {\n      groupedKeys = groupedKeys.concat(groups[group]);\n    });\n    keys.forEach(key => {\n      toCheck = [key].concat(aliases[key]);\n\n      if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n        groups[defaultGroup].push(key);\n      }\n    });\n    return groupedKeys;\n  }\n\n  function filterHiddenOptions(key) {\n    return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt];\n  }\n\n  self.showHelp = level => {\n    const logger = yargs._getLoggerInstance();\n\n    if (!level) level = 'error';\n    const emit = typeof level === 'function' ? level : logger[level];\n    emit(self.help());\n  };\n\n  self.functionDescription = fn => {\n    const description = fn.name ? decamelize(fn.name, '-') : __('generated-value');\n    return ['(', description, ')'].join('');\n  };\n\n  self.stringifiedValues = function stringifiedValues(values, separator) {\n    let string = '';\n    const sep = separator || ', ';\n    const array = [].concat(values);\n    if (!values || !array.length) return string;\n    array.forEach(value => {\n      if (string.length) string += sep;\n      string += JSON.stringify(value);\n    });\n    return string;\n  }; // format the default-value-string displayed in\n  // the right-hand column.\n\n\n  function defaultString(value, defaultDescription) {\n    let string = `[${__('default:')} `;\n    if (value === undefined && !defaultDescription) return null;\n\n    if (defaultDescription) {\n      string += defaultDescription;\n    } else {\n      switch (typeof value) {\n        case 'string':\n          string += `\"${value}\"`;\n          break;\n\n        case 'object':\n          string += JSON.stringify(value);\n          break;\n\n        default:\n          string += value;\n      }\n    }\n\n    return `${string}]`;\n  } // guess the width of the console window, max-width 80.\n\n\n  function windowWidth() {\n    const maxWidth = 80;\n\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n      return Math.min(maxWidth, process.stdout.columns);\n    } else {\n      return maxWidth;\n    }\n  } // logic for displaying application version.\n\n\n  let version = null;\n\n  self.version = ver => {\n    version = ver;\n  };\n\n  self.showVersion = () => {\n    const logger = yargs._getLoggerInstance();\n\n    logger.log(version);\n  };\n\n  self.reset = function reset(localLookup) {\n    // do not reset wrap here\n    // do not reset fails here\n    failMessage = null;\n    failureOutput = false;\n    usages = [];\n    usageDisabled = false;\n    epilog = undefined;\n    examples = [];\n    commands = [];\n    descriptions = objFilter(descriptions, (k, v) => !localLookup[k]);\n    return self;\n  };\n\n  let frozen;\n\n  self.freeze = function freeze() {\n    frozen = {};\n    frozen.failMessage = failMessage;\n    frozen.failureOutput = failureOutput;\n    frozen.usages = usages;\n    frozen.usageDisabled = usageDisabled;\n    frozen.epilog = epilog;\n    frozen.examples = examples;\n    frozen.commands = commands;\n    frozen.descriptions = descriptions;\n  };\n\n  self.unfreeze = function unfreeze() {\n    failMessage = frozen.failMessage;\n    failureOutput = frozen.failureOutput;\n    usages = frozen.usages;\n    usageDisabled = frozen.usageDisabled;\n    epilog = frozen.epilog;\n    examples = frozen.examples;\n    commands = frozen.commands;\n    descriptions = frozen.descriptions;\n    frozen = undefined;\n  };\n\n  return self;\n};","map":{"version":3,"sources":["/Users/sidneyjackson/Desktop/GitHub Projects/UnitedCoders/clueless_react/node_modules/yargs/lib/usage.js"],"names":["decamelize","require","stringWidth","objFilter","path","setBlocking","YError","module","exports","usage","yargs","y18n","__","self","fails","failFn","f","push","failMessage","showHelpOnFail","showHelpOnFailFn","enabled","message","failureOutput","fail","msg","err","logger","_getLoggerInstance","length","i","getExitProcess","showHelp","error","exit","_hasParseCallback","usages","usageDisabled","description","getUsage","getUsageDisabled","getPositionalGroupName","examples","example","cmd","commands","command","isDefault","aliases","map","cmdArray","getCommands","descriptions","describe","key","desc","Object","keys","forEach","k","getDescriptions","epilog","wrapSet","wrap","cols","getWrap","windowWidth","deferY18nLookupPrefix","deferY18nLookup","str","defaultGroup","help","normalizeAliases","base$0","basename","$0","demandedOptions","getDemandedOptions","demandedCommands","getDemandedCommands","groups","getGroups","options","getOptions","concat","default","filter","filterHiddenOptions","reduce","acc","theWrap","ui","width","div","replace","text","padding","u","_","context","getContext","parentCommands","join","getParserConfiguration","sort","a","b","localeCompare","commandString","span","maxWidth","hints","slice","align","aliasKeys","alias","parsed","newAliases","every","indexOf","addUngroupedKeys","groupName","normalizedKeys","aliasKey","undefined","switches","sw","kswitch","type","lastIndexOf","substring","boolean","count","string","normalize","array","number","extra","choices","stringifiedValues","defaultString","defaultDescription","Boolean","e","toString","table","modifier","Array","isArray","v","Math","max","min","parseInt","demandOption","groupedKeys","toCheck","group","some","hiddenOptions","argv","showHiddenOpt","level","emit","functionDescription","fn","name","values","separator","sep","value","JSON","stringify","process","stdout","columns","version","ver","showVersion","log","reset","localLookup","frozen","freeze","unfreeze"],"mappings":"AAAA,a,CACA;AACA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;AAC5C,QAAMC,EAAE,GAAGD,IAAI,CAACC,EAAhB;AACA,QAAMC,IAAI,GAAG,EAAb,CAF4C,CAI5C;;AACA,QAAMC,KAAK,GAAG,EAAd;;AACAD,EAAAA,IAAI,CAACE,MAAL,GAAc,SAASA,MAAT,CAAiBC,CAAjB,EAAoB;AAChCF,IAAAA,KAAK,CAACG,IAAN,CAAWD,CAAX;AACD,GAFD;;AAIA,MAAIE,WAAW,GAAG,IAAlB;AACA,MAAIC,cAAc,GAAG,IAArB;;AACAN,EAAAA,IAAI,CAACM,cAAL,GAAsB,SAASC,gBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AACjE,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/BC,MAAAA,OAAO,GAAGD,OAAV;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD,KAHD,MAGO,IAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AACzCA,MAAAA,OAAO,GAAG,IAAV;AACD;;AACDH,IAAAA,WAAW,GAAGI,OAAd;AACAH,IAAAA,cAAc,GAAGE,OAAjB;AACA,WAAOR,IAAP;AACD,GAVD;;AAYA,MAAIU,aAAa,GAAG,KAApB;;AACAV,EAAAA,IAAI,CAACW,IAAL,GAAY,SAASA,IAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACnC,UAAMC,MAAM,GAAGjB,KAAK,CAACkB,kBAAN,EAAf;;AAEA,QAAId,KAAK,CAACe,MAAV,EAAkB;AAChB,WAAK,IAAIC,CAAC,GAAGhB,KAAK,CAACe,MAAN,GAAe,CAA5B,EAA+BC,CAAC,IAAI,CAApC,EAAuC,EAAEA,CAAzC,EAA4C;AAC1ChB,QAAAA,KAAK,CAACgB,CAAD,CAAL,CAASL,GAAT,EAAcC,GAAd,EAAmBb,IAAnB;AACD;AACF,KAJD,MAIO;AACL,UAAIH,KAAK,CAACqB,cAAN,EAAJ,EAA4B1B,WAAW,CAAC,IAAD,CAAX,CADvB,CAGL;;AACA,UAAI,CAACkB,aAAL,EAAoB;AAClBA,QAAAA,aAAa,GAAG,IAAhB;;AACA,YAAIJ,cAAJ,EAAoB;AAClBT,UAAAA,KAAK,CAACsB,QAAN,CAAe,OAAf;AACAL,UAAAA,MAAM,CAACM,KAAP;AACD;;AACD,YAAIR,GAAG,IAAIC,GAAX,EAAgBC,MAAM,CAACM,KAAP,CAAaR,GAAG,IAAIC,GAApB;;AAChB,YAAIR,WAAJ,EAAiB;AACf,cAAIO,GAAG,IAAIC,GAAX,EAAgBC,MAAM,CAACM,KAAP,CAAa,EAAb;AAChBN,UAAAA,MAAM,CAACM,KAAP,CAAaf,WAAb;AACD;AACF;;AAEDQ,MAAAA,GAAG,GAAGA,GAAG,IAAI,IAAIpB,MAAJ,CAAWmB,GAAX,CAAb;;AACA,UAAIf,KAAK,CAACqB,cAAN,EAAJ,EAA4B;AAC1B,eAAOrB,KAAK,CAACwB,IAAN,CAAW,CAAX,CAAP;AACD,OAFD,MAEO,IAAIxB,KAAK,CAACyB,iBAAN,EAAJ,EAA+B;AACpC,eAAOzB,KAAK,CAACwB,IAAN,CAAW,CAAX,EAAcR,GAAd,CAAP;AACD,OAFM,MAEA;AACL,cAAMA,GAAN;AACD;AACF;AACF,GAjCD,CAzB4C,CA4D5C;;;AACA,MAAIU,MAAM,GAAG,EAAb;AACA,MAAIC,aAAa,GAAG,KAApB;;AACAxB,EAAAA,IAAI,CAACJ,KAAL,GAAa,CAACgB,GAAD,EAAMa,WAAN,KAAsB;AACjC,QAAIb,GAAG,KAAK,IAAZ,EAAkB;AAChBY,MAAAA,aAAa,GAAG,IAAhB;AACAD,MAAAA,MAAM,GAAG,EAAT;AACA;AACD;;AACDC,IAAAA,aAAa,GAAG,KAAhB;AACAD,IAAAA,MAAM,CAACnB,IAAP,CAAY,CAACQ,GAAD,EAAMa,WAAW,IAAI,EAArB,CAAZ;AACA,WAAOzB,IAAP;AACD,GATD;;AAUAA,EAAAA,IAAI,CAAC0B,QAAL,GAAgB,MAAM;AACpB,WAAOH,MAAP;AACD,GAFD;;AAGAvB,EAAAA,IAAI,CAAC2B,gBAAL,GAAwB,MAAM;AAC5B,WAAOH,aAAP;AACD,GAFD;;AAIAxB,EAAAA,IAAI,CAAC4B,sBAAL,GAA8B,MAAM;AAClC,WAAO7B,EAAE,CAAC,cAAD,CAAT;AACD,GAFD;;AAIA,MAAI8B,QAAQ,GAAG,EAAf;;AACA7B,EAAAA,IAAI,CAAC8B,OAAL,GAAe,CAACC,GAAD,EAAMN,WAAN,KAAsB;AACnCI,IAAAA,QAAQ,CAACzB,IAAT,CAAc,CAAC2B,GAAD,EAAMN,WAAW,IAAI,EAArB,CAAd;AACD,GAFD;;AAIA,MAAIO,QAAQ,GAAG,EAAf;;AACAhC,EAAAA,IAAI,CAACiC,OAAL,GAAe,SAASA,OAAT,CAAkBF,GAAlB,EAAuBN,WAAvB,EAAoCS,SAApC,EAA+CC,OAA/C,EAAwD;AACrE;AACA,QAAID,SAAJ,EAAe;AACbF,MAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAcC,QAAD,IAAc;AACpCA,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAd;AACA,eAAOA,QAAP;AACD,OAHU,CAAX;AAID;;AACDL,IAAAA,QAAQ,CAAC5B,IAAT,CAAc,CAAC2B,GAAD,EAAMN,WAAW,IAAI,EAArB,EAAyBS,SAAzB,EAAoCC,OAApC,CAAd;AACD,GATD;;AAUAnC,EAAAA,IAAI,CAACsC,WAAL,GAAmB,MAAMN,QAAzB;;AAEA,MAAIO,YAAY,GAAG,EAAnB;;AACAvC,EAAAA,IAAI,CAACwC,QAAL,GAAgB,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5C,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BE,MAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAA0BC,CAAD,IAAO;AAC9B9C,QAAAA,IAAI,CAACwC,QAAL,CAAcM,CAAd,EAAiBL,GAAG,CAACK,CAAD,CAApB;AACD,OAFD;AAGD,KAJD,MAIO;AACLP,MAAAA,YAAY,CAACE,GAAD,CAAZ,GAAoBC,IAApB;AACD;AACF,GARD;;AASA1C,EAAAA,IAAI,CAAC+C,eAAL,GAAuB,MAAMR,YAA7B;;AAEA,MAAIS,MAAJ;;AACAhD,EAAAA,IAAI,CAACgD,MAAL,GAAepC,GAAD,IAAS;AACrBoC,IAAAA,MAAM,GAAGpC,GAAT;AACD,GAFD;;AAIA,MAAIqC,OAAO,GAAG,KAAd;AACA,MAAIC,IAAJ;;AACAlD,EAAAA,IAAI,CAACkD,IAAL,GAAaC,IAAD,IAAU;AACpBF,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,IAAI,GAAGC,IAAP;AACD,GAHD;;AAKA,WAASC,OAAT,GAAoB;AAClB,QAAI,CAACH,OAAL,EAAc;AACZC,MAAAA,IAAI,GAAGG,WAAW,EAAlB;AACAJ,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,WAAOC,IAAP;AACD;;AAED,QAAMI,qBAAqB,GAAG,kBAA9B;;AACAtD,EAAAA,IAAI,CAACuD,eAAL,GAAuBC,GAAG,IAAIF,qBAAqB,GAAGE,GAAtD;;AAEA,QAAMC,YAAY,GAAG,UAArB;;AACAzD,EAAAA,IAAI,CAAC0D,IAAL,GAAY,SAASA,IAAT,GAAiB;AAC3BC,IAAAA,gBAAgB,GADW,CAG3B;;AACA,UAAMC,MAAM,GAAGrE,IAAI,CAACsE,QAAL,CAAchE,KAAK,CAACiE,EAApB,CAAf;AACA,UAAMC,eAAe,GAAGlE,KAAK,CAACmE,kBAAN,EAAxB;AACA,UAAMC,gBAAgB,GAAGpE,KAAK,CAACqE,mBAAN,EAAzB;AACA,UAAMC,MAAM,GAAGtE,KAAK,CAACuE,SAAN,EAAf;AACA,UAAMC,OAAO,GAAGxE,KAAK,CAACyE,UAAN,EAAhB;AAEA,QAAI1B,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAAC2B,MAAL,CAAY5B,MAAM,CAACC,IAAP,CAAYL,YAAZ,CAAZ,CAAP;AACAK,IAAAA,IAAI,GAAGA,IAAI,CAAC2B,MAAL,CAAY5B,MAAM,CAACC,IAAP,CAAYmB,eAAZ,CAAZ,CAAP;AACAnB,IAAAA,IAAI,GAAGA,IAAI,CAAC2B,MAAL,CAAY5B,MAAM,CAACC,IAAP,CAAYqB,gBAAZ,CAAZ,CAAP;AACArB,IAAAA,IAAI,GAAGA,IAAI,CAAC2B,MAAL,CAAY5B,MAAM,CAACC,IAAP,CAAYyB,OAAO,CAACG,OAApB,CAAZ,CAAP;AACA5B,IAAAA,IAAI,GAAGA,IAAI,CAAC6B,MAAL,CAAYC,mBAAZ,CAAP;AACA9B,IAAAA,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYA,IAAI,CAAC+B,MAAL,CAAY,CAACC,GAAD,EAAMnC,GAAN,KAAc;AAC3C,UAAIA,GAAG,KAAK,GAAZ,EAAiBmC,GAAG,CAACnC,GAAD,CAAH,GAAW,IAAX;AACjB,aAAOmC,GAAP;AACD,KAHkB,EAGhB,EAHgB,CAAZ,CAAP;AAKA,UAAMC,OAAO,GAAGzB,OAAO,EAAvB;;AACA,UAAM0B,EAAE,GAAG1F,OAAO,CAAC,OAAD,CAAP,CAAiB;AAC1B2F,MAAAA,KAAK,EAAEF,OADmB;AAE1B3B,MAAAA,IAAI,EAAE,CAAC,CAAC2B;AAFkB,KAAjB,CAAX,CAtB2B,CA2B3B;;;AACA,QAAI,CAACrD,aAAL,EAAoB;AAClB,UAAID,MAAM,CAACP,MAAX,EAAmB;AACjB;AACAO,QAAAA,MAAM,CAACsB,OAAP,CAAgBjD,KAAD,IAAW;AACxBkF,UAAAA,EAAE,CAACE,GAAH,CAAQ,GAAEpF,KAAK,CAAC,CAAD,CAAL,CAASqF,OAAT,CAAiB,MAAjB,EAAyBrB,MAAzB,CAAiC,EAA3C;;AACA,cAAIhE,KAAK,CAAC,CAAD,CAAT,EAAc;AACZkF,YAAAA,EAAE,CAACE,GAAH,CAAO;AAAEE,cAAAA,IAAI,EAAG,GAAEtF,KAAK,CAAC,CAAD,CAAI,EAApB;AAAuBuF,cAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAhC,aAAP;AACD;AACF,SALD;AAMAL,QAAAA,EAAE,CAACE,GAAH;AACD,OATD,MASO,IAAIhD,QAAQ,CAAChB,MAAb,EAAqB;AAC1B,YAAIoE,CAAC,GAAG,IAAR,CAD0B,CAE1B;;AACA,YAAInB,gBAAgB,CAACoB,CAArB,EAAwB;AACtBD,UAAAA,CAAC,GAAI,GAAExB,MAAO,KAAI7D,EAAE,CAAC,SAAD,CAAY,KAAhC;AACD,SAFD,MAEO;AACLqF,UAAAA,CAAC,GAAI,GAAExB,MAAO,KAAI7D,EAAE,CAAC,SAAD,CAAY,KAAhC;AACD;;AACD+E,QAAAA,EAAE,CAACE,GAAH,CAAQ,GAAEI,CAAE,EAAZ;AACD;AACF,KAhD0B,CAkD3B;AACA;;;AACA,QAAIpD,QAAQ,CAAChB,MAAb,EAAqB;AACnB8D,MAAAA,EAAE,CAACE,GAAH,CAAOjF,EAAE,CAAC,WAAD,CAAT;AAEA,YAAMuF,OAAO,GAAGzF,KAAK,CAAC0F,UAAN,EAAhB;AACA,YAAMC,cAAc,GAAGF,OAAO,CAACtD,QAAR,CAAiBhB,MAAjB,GAA2B,GAAEsE,OAAO,CAACtD,QAAR,CAAiByD,IAAjB,CAAsB,GAAtB,CAA2B,GAAxD,GAA6D,EAApF;;AAEA,UAAI5F,KAAK,CAAC6F,sBAAN,GAA+B,eAA/B,MAAoD,IAAxD,EAA8D;AAC5D1D,QAAAA,QAAQ,GAAGA,QAAQ,CAAC2D,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,CAAKE,aAAL,CAAmBD,CAAC,CAAC,CAAD,CAApB,CAAxB,CAAX;AACD;;AAED7D,MAAAA,QAAQ,CAACa,OAAT,CAAkBZ,OAAD,IAAa;AAC5B,cAAM8D,aAAa,GAAI,GAAEnC,MAAO,IAAG4B,cAAe,GAAEvD,OAAO,CAAC,CAAD,CAAP,CAAWgD,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,CAAiC,EAArF,CAD4B,CAC2D;;AACvFH,QAAAA,EAAE,CAACkB,IAAH,CACE;AACEd,UAAAA,IAAI,EAAEa,aADR;AAEEZ,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFX;AAGEJ,UAAAA,KAAK,EAAEkB,QAAQ,CAACjE,QAAD,EAAW6C,OAAX,EAAqB,GAAEjB,MAAO,GAAE4B,cAAe,EAA/C,CAAR,GAA4D;AAHrE,SADF,EAME;AAAEN,UAAAA,IAAI,EAAEjD,OAAO,CAAC,CAAD;AAAf,SANF;AAQA,cAAMiE,KAAK,GAAG,EAAd;AACA,YAAIjE,OAAO,CAAC,CAAD,CAAX,EAAgBiE,KAAK,CAAC9F,IAAN,CAAY,IAAGL,EAAE,CAAC,UAAD,CAAF,CAAeoG,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAA4B,GAA3C,EAXY,CAWmC;;AAC/D,YAAIlE,OAAO,CAAC,CAAD,CAAP,IAAcA,OAAO,CAAC,CAAD,CAAP,CAAWjB,MAA7B,EAAqC;AACnCkF,UAAAA,KAAK,CAAC9F,IAAN,CAAY,IAAGL,EAAE,CAAC,UAAD,CAAa,IAAGkC,OAAO,CAAC,CAAD,CAAP,CAAWwD,IAAX,CAAgB,IAAhB,CAAsB,GAAvD;AACD;;AACD,YAAIS,KAAK,CAAClF,MAAV,EAAkB;AAChB8D,UAAAA,EAAE,CAACE,GAAH,CAAO;AAAEE,YAAAA,IAAI,EAAEgB,KAAK,CAACT,IAAN,CAAW,GAAX,CAAR;AAAyBN,YAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAlC;AAAgDiB,YAAAA,KAAK,EAAE;AAAvD,WAAP;AACD,SAFD,MAEO;AACLtB,UAAAA,EAAE,CAACE,GAAH;AACD;AACF,OApBD;AAsBAF,MAAAA,EAAE,CAACE,GAAH;AACD,KArF0B,CAuF3B;AACA;;;AACA,UAAMqB,SAAS,GAAG,CAAC1D,MAAM,CAACC,IAAP,CAAYyB,OAAO,CAACiC,KAApB,KAA8B,EAA/B,EACf/B,MADe,CACR5B,MAAM,CAACC,IAAP,CAAY/C,KAAK,CAAC0G,MAAN,CAAaC,UAAzB,KAAwC,EADhC,CAAlB;AAGA5D,IAAAA,IAAI,GAAGA,IAAI,CAAC6B,MAAL,CAAYhC,GAAG,IAAI,CAAC5C,KAAK,CAAC0G,MAAN,CAAaC,UAAb,CAAwB/D,GAAxB,CAAD,IAAiC4D,SAAS,CAACI,KAAV,CAAgBH,KAAK,IAAI,CAACjC,OAAO,CAACiC,KAAR,CAAcA,KAAd,KAAwB,EAAzB,EAA6BI,OAA7B,CAAqCjE,GAArC,MAA8C,CAAC,CAAxE,CAApD,CAAP,CA5F2B,CA8F3B;AACA;;AACA,QAAI,CAAC0B,MAAM,CAACV,YAAD,CAAX,EAA2BU,MAAM,CAACV,YAAD,CAAN,GAAuB,EAAvB;AAC3BkD,IAAAA,gBAAgB,CAAC/D,IAAD,EAAOyB,OAAO,CAACiC,KAAf,EAAsBnC,MAAtB,CAAhB,CAjG2B,CAmG3B;;AACAxB,IAAAA,MAAM,CAACC,IAAP,CAAYuB,MAAZ,EAAoBtB,OAApB,CAA6B+D,SAAD,IAAe;AACzC,UAAI,CAACzC,MAAM,CAACyC,SAAD,CAAN,CAAkB5F,MAAvB,EAA+B,OADU,CAGzC;AACA;;AACA,YAAM6F,cAAc,GAAG1C,MAAM,CAACyC,SAAD,CAAN,CAAkBnC,MAAlB,CAAyBC,mBAAzB,EAA8CtC,GAA9C,CAAmDK,GAAD,IAAS;AAChF,YAAI,CAAC4D,SAAS,CAACK,OAAV,CAAkBjE,GAAlB,CAAL,EAA6B,OAAOA,GAAP;;AAC7B,aAAK,IAAIxB,CAAC,GAAG,CAAR,EAAW6F,QAAhB,EAA0B,CAACA,QAAQ,GAAGT,SAAS,CAACpF,CAAD,CAArB,MAA8B8F,SAAxD,EAAmE9F,CAAC,EAApE,EAAwE;AACtE,cAAI,CAAC,CAACoD,OAAO,CAACiC,KAAR,CAAcQ,QAAd,KAA2B,EAA5B,EAAgCJ,OAAhC,CAAwCjE,GAAxC,CAAL,EAAmD,OAAOqE,QAAP;AACpD;;AACD,eAAOrE,GAAP;AACD,OANsB,CAAvB;AAQA,UAAIoE,cAAc,CAAC7F,MAAf,GAAwB,CAA5B,EAA+B;AAE/B8D,MAAAA,EAAE,CAACE,GAAH,CAAOjF,EAAE,CAAC6G,SAAD,CAAT,EAfyC,CAiBzC;;AACA,YAAMI,QAAQ,GAAGH,cAAc,CAAClC,MAAf,CAAsB,CAACC,GAAD,EAAMnC,GAAN,KAAc;AACnDmC,QAAAA,GAAG,CAACnC,GAAD,CAAH,GAAW,CAAEA,GAAF,EAAQ8B,MAAR,CAAeF,OAAO,CAACiC,KAAR,CAAc7D,GAAd,KAAsB,EAArC,EACRL,GADQ,CACJ6E,EAAE,IAAI;AACT;AACA;AACA,cAAIL,SAAS,KAAK5G,IAAI,CAAC4B,sBAAL,EAAlB,EAAiD,OAAOqF,EAAP,CAAjD,KACK,OAAO,CAACA,EAAE,CAACjG,MAAH,GAAY,CAAZ,GAAgB,IAAhB,GAAuB,GAAxB,IAA+BiG,EAAtC;AACN,SANQ,EAORxB,IAPQ,CAOH,IAPG,CAAX;AASA,eAAOb,GAAP;AACD,OAXgB,EAWd,EAXc,CAAjB;AAaAiC,MAAAA,cAAc,CAAChE,OAAf,CAAwBJ,GAAD,IAAS;AAC9B,cAAMyE,OAAO,GAAGF,QAAQ,CAACvE,GAAD,CAAxB;AACA,YAAIC,IAAI,GAAGH,YAAY,CAACE,GAAD,CAAZ,IAAqB,EAAhC;AACA,YAAI0E,IAAI,GAAG,IAAX;AAEA,YAAI,CAACzE,IAAI,CAAC0E,WAAL,CAAiB9D,qBAAjB,CAAL,EAA8CZ,IAAI,GAAG3C,EAAE,CAAC2C,IAAI,CAAC2E,SAAL,CAAe/D,qBAAqB,CAACtC,MAArC,CAAD,CAAT;AAE9C,YAAI,CAACqD,OAAO,CAACiD,OAAR,CAAgBZ,OAAhB,CAAwBjE,GAAxB,CAAL,EAAmC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,SAAD,CAAY,GAAzB;AACnC,YAAI,CAACsE,OAAO,CAACkD,KAAR,CAAcb,OAAd,CAAsBjE,GAAtB,CAAL,EAAiC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,OAAD,CAAU,GAAvB;AACjC,YAAI,CAACsE,OAAO,CAACmD,MAAR,CAAed,OAAf,CAAuBjE,GAAvB,CAAL,EAAkC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,QAAD,CAAW,GAAxB;AAClC,YAAI,CAACsE,OAAO,CAACoD,SAAR,CAAkBf,OAAlB,CAA0BjE,GAA1B,CAAL,EAAqC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,QAAD,CAAW,GAAxB;AACrC,YAAI,CAACsE,OAAO,CAACqD,KAAR,CAAchB,OAAd,CAAsBjE,GAAtB,CAAL,EAAiC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,OAAD,CAAU,GAAvB;AACjC,YAAI,CAACsE,OAAO,CAACsD,MAAR,CAAejB,OAAf,CAAuBjE,GAAvB,CAAL,EAAkC0E,IAAI,GAAI,IAAGpH,EAAE,CAAC,QAAD,CAAW,GAAxB;AAElC,cAAM6H,KAAK,GAAG,CACZT,IADY,EAEX1E,GAAG,IAAIsB,eAAR,GAA4B,IAAGhE,EAAE,CAAC,UAAD,CAAa,GAA9C,GAAmD,IAFvC,EAGZsE,OAAO,CAACwD,OAAR,IAAmBxD,OAAO,CAACwD,OAAR,CAAgBpF,GAAhB,CAAnB,GAA2C,IAAG1C,EAAE,CAAC,UAAD,CAAa,IAC3DC,IAAI,CAAC8H,iBAAL,CAAuBzD,OAAO,CAACwD,OAAR,CAAgBpF,GAAhB,CAAvB,CAA6C,GAD/C,GACoD,IAJxC,EAKZsF,aAAa,CAAC1D,OAAO,CAACG,OAAR,CAAgB/B,GAAhB,CAAD,EAAuB4B,OAAO,CAAC2D,kBAAR,CAA2BvF,GAA3B,CAAvB,CALD,EAMZgC,MANY,CAMLwD,OANK,EAMIxC,IANJ,CAMS,GANT,CAAd;AAQAX,QAAAA,EAAE,CAACkB,IAAH,CACE;AAAEd,UAAAA,IAAI,EAAEgC,OAAR;AAAiB/B,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1B;AAAwCJ,UAAAA,KAAK,EAAEkB,QAAQ,CAACe,QAAD,EAAWnC,OAAX,CAAR,GAA8B;AAA7E,SADF,EAEEnC,IAFF;AAKA,YAAIkF,KAAJ,EAAW9C,EAAE,CAACE,GAAH,CAAO;AAAEE,UAAAA,IAAI,EAAE0C,KAAR;AAAezC,UAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAxB;AAAsCiB,UAAAA,KAAK,EAAE;AAA7C,SAAP,EAAX,KACKtB,EAAE,CAACE,GAAH;AACN,OA7BD;AA+BAF,MAAAA,EAAE,CAACE,GAAH;AACD,KA/DD,EApG2B,CAqK3B;;AACA,QAAInD,QAAQ,CAACb,MAAb,EAAqB;AACnB8D,MAAAA,EAAE,CAACE,GAAH,CAAOjF,EAAE,CAAC,WAAD,CAAT;AAEA8B,MAAAA,QAAQ,CAACgB,OAAT,CAAkBf,OAAD,IAAa;AAC5BA,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAP,CAAWmD,OAAX,CAAmB,MAAnB,EAA2BrB,MAA3B,CAAb;AACD,OAFD;AAIA/B,MAAAA,QAAQ,CAACgB,OAAT,CAAkBf,OAAD,IAAa;AAC5B,YAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,EAAnB,EAAuB;AACrBgD,UAAAA,EAAE,CAACE,GAAH,CACE;AACEE,YAAAA,IAAI,EAAEpD,OAAO,CAAC,CAAD,CADf;AAEEqD,YAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAFX,WADF;AAMD,SAPD,MAOO;AACLL,UAAAA,EAAE,CAACE,GAAH,CACE;AACEE,YAAAA,IAAI,EAAEpD,OAAO,CAAC,CAAD,CADf;AAEEqD,YAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFX;AAGEJ,YAAAA,KAAK,EAAEkB,QAAQ,CAACpE,QAAD,EAAWgD,OAAX,CAAR,GAA8B;AAHvC,WADF,EAKK;AACDK,YAAAA,IAAI,EAAEpD,OAAO,CAAC,CAAD;AADZ,WALL;AASD;AACF,OAnBD;AAqBAgD,MAAAA,EAAE,CAACE,GAAH;AACD,KAnM0B,CAqM3B;;;AACA,QAAIhC,MAAJ,EAAY;AACV,YAAMkF,CAAC,GAAGlF,MAAM,CAACiC,OAAP,CAAe,MAAf,EAAuBrB,MAAvB,CAAV;AACAkB,MAAAA,EAAE,CAACE,GAAH,CAAQ,GAAEkD,CAAE,IAAZ;AACD,KAzM0B,CA2M3B;;;AACA,WAAOpD,EAAE,CAACqD,QAAH,GAAclD,OAAd,CAAsB,MAAtB,EAA8B,EAA9B,CAAP;AACD,GA7MD,CA3I4C,CA0V5C;AACA;;;AACA,WAASgB,QAAT,CAAmBmC,KAAnB,EAA0BvD,OAA1B,EAAmCwD,QAAnC,EAA6C;AAC3C,QAAItD,KAAK,GAAG,CAAZ,CAD2C,CAG3C;AACA;;AACA,QAAI,CAACuD,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBA,MAAAA,KAAK,GAAGzF,MAAM,CAACC,IAAP,CAAYwF,KAAZ,EAAmBhG,GAAnB,CAAuBK,GAAG,IAAI,CAAC2F,KAAK,CAAC3F,GAAD,CAAN,CAA9B,CAAR;AACD;;AAED2F,IAAAA,KAAK,CAACvF,OAAN,CAAe2F,CAAD,IAAO;AACnBzD,MAAAA,KAAK,GAAG0D,IAAI,CAACC,GAAL,CACNrJ,WAAW,CAACgJ,QAAQ,GAAI,GAAEA,QAAS,IAAGG,CAAC,CAAC,CAAD,CAAI,EAAvB,GAA2BA,CAAC,CAAC,CAAD,CAArC,CADL,EAENzD,KAFM,CAAR;AAID,KALD,EAT2C,CAgB3C;AACA;;AACA,QAAIF,OAAJ,EAAaE,KAAK,GAAG0D,IAAI,CAACE,GAAL,CAAS5D,KAAT,EAAgB6D,QAAQ,CAAC/D,OAAO,GAAG,GAAX,EAAgB,EAAhB,CAAxB,CAAR;AAEb,WAAOE,KAAP;AACD,GAjX2C,CAmX5C;AACA;;;AACA,WAASpB,gBAAT,GAA6B;AAC3B;AACA,UAAMI,eAAe,GAAGlE,KAAK,CAACmE,kBAAN,EAAxB;AACA,UAAMK,OAAO,GAAGxE,KAAK,CAACyE,UAAN,EAAhB;AAEC,KAAC3B,MAAM,CAACC,IAAP,CAAYyB,OAAO,CAACiC,KAApB,KAA8B,EAA/B,EAAmCzD,OAAnC,CAA4CJ,GAAD,IAAS;AACnD4B,MAAAA,OAAO,CAACiC,KAAR,CAAc7D,GAAd,EAAmBI,OAAnB,CAA4ByD,KAAD,IAAW;AACpC;AACA,YAAI/D,YAAY,CAAC+D,KAAD,CAAhB,EAAyBtG,IAAI,CAACwC,QAAL,CAAcC,GAAd,EAAmBF,YAAY,CAAC+D,KAAD,CAA/B,EAFW,CAGpC;;AACA,YAAIA,KAAK,IAAIvC,eAAb,EAA8BlE,KAAK,CAACgJ,YAAN,CAAmBpG,GAAnB,EAAwBsB,eAAe,CAACuC,KAAD,CAAvC,EAJM,CAKpC;;AACA,YAAI,CAACjC,OAAO,CAACiD,OAAR,CAAgBZ,OAAhB,CAAwBJ,KAAxB,CAAL,EAAqCzG,KAAK,CAACyH,OAAN,CAAc7E,GAAd;AACrC,YAAI,CAAC4B,OAAO,CAACkD,KAAR,CAAcb,OAAd,CAAsBJ,KAAtB,CAAL,EAAmCzG,KAAK,CAAC0H,KAAN,CAAY9E,GAAZ;AACnC,YAAI,CAAC4B,OAAO,CAACmD,MAAR,CAAed,OAAf,CAAuBJ,KAAvB,CAAL,EAAoCzG,KAAK,CAAC2H,MAAN,CAAa/E,GAAb;AACpC,YAAI,CAAC4B,OAAO,CAACoD,SAAR,CAAkBf,OAAlB,CAA0BJ,KAA1B,CAAL,EAAuCzG,KAAK,CAAC4H,SAAN,CAAgBhF,GAAhB;AACvC,YAAI,CAAC4B,OAAO,CAACqD,KAAR,CAAchB,OAAd,CAAsBJ,KAAtB,CAAL,EAAmCzG,KAAK,CAAC6H,KAAN,CAAYjF,GAAZ;AACnC,YAAI,CAAC4B,OAAO,CAACsD,MAAR,CAAejB,OAAf,CAAuBJ,KAAvB,CAAL,EAAoCzG,KAAK,CAAC8H,MAAN,CAAalF,GAAb;AACrC,OAZD;AAaD,KAdA;AAeF,GAzY2C,CA2Y5C;AACA;;;AACA,WAASkE,gBAAT,CAA2B/D,IAA3B,EAAiCT,OAAjC,EAA0CgC,MAA1C,EAAkD;AAChD,QAAI2E,WAAW,GAAG,EAAlB;AACA,QAAIC,OAAO,GAAG,IAAd;AACApG,IAAAA,MAAM,CAACC,IAAP,CAAYuB,MAAZ,EAAoBtB,OAApB,CAA6BmG,KAAD,IAAW;AACrCF,MAAAA,WAAW,GAAGA,WAAW,CAACvE,MAAZ,CAAmBJ,MAAM,CAAC6E,KAAD,CAAzB,CAAd;AACD,KAFD;AAIApG,IAAAA,IAAI,CAACC,OAAL,CAAcJ,GAAD,IAAS;AACpBsG,MAAAA,OAAO,GAAG,CAACtG,GAAD,EAAM8B,MAAN,CAAapC,OAAO,CAACM,GAAD,CAApB,CAAV;;AACA,UAAI,CAACsG,OAAO,CAACE,IAAR,CAAanG,CAAC,IAAIgG,WAAW,CAACpC,OAAZ,CAAoB5D,CAApB,MAA2B,CAAC,CAA9C,CAAL,EAAuD;AACrDqB,QAAAA,MAAM,CAACV,YAAD,CAAN,CAAqBrD,IAArB,CAA0BqC,GAA1B;AACD;AACF,KALD;AAMA,WAAOqG,WAAP;AACD;;AAED,WAASpE,mBAAT,CAA8BjC,GAA9B,EAAmC;AACjC,WAAO5C,KAAK,CAACyE,UAAN,GAAmB4E,aAAnB,CAAiCxC,OAAjC,CAAyCjE,GAAzC,IAAgD,CAAhD,IAAqD5C,KAAK,CAAC0G,MAAN,CAAa4C,IAAb,CAAkBtJ,KAAK,CAACyE,UAAN,GAAmB8E,aAArC,CAA5D;AACD;;AAEDpJ,EAAAA,IAAI,CAACmB,QAAL,GAAiBkI,KAAD,IAAW;AACzB,UAAMvI,MAAM,GAAGjB,KAAK,CAACkB,kBAAN,EAAf;;AACA,QAAI,CAACsI,KAAL,EAAYA,KAAK,GAAG,OAAR;AACZ,UAAMC,IAAI,GAAG,OAAOD,KAAP,KAAiB,UAAjB,GAA8BA,KAA9B,GAAsCvI,MAAM,CAACuI,KAAD,CAAzD;AACAC,IAAAA,IAAI,CAACtJ,IAAI,CAAC0D,IAAL,EAAD,CAAJ;AACD,GALD;;AAOA1D,EAAAA,IAAI,CAACuJ,mBAAL,GAA4BC,EAAD,IAAQ;AACjC,UAAM/H,WAAW,GAAG+H,EAAE,CAACC,IAAH,GAAUtK,UAAU,CAACqK,EAAE,CAACC,IAAJ,EAAU,GAAV,CAApB,GAAqC1J,EAAE,CAAC,iBAAD,CAA3D;AACA,WAAO,CAAC,GAAD,EAAM0B,WAAN,EAAmB,GAAnB,EAAwBgE,IAAxB,CAA6B,EAA7B,CAAP;AACD,GAHD;;AAKAzF,EAAAA,IAAI,CAAC8H,iBAAL,GAAyB,SAASA,iBAAT,CAA4B4B,MAA5B,EAAoCC,SAApC,EAA+C;AACtE,QAAInC,MAAM,GAAG,EAAb;AACA,UAAMoC,GAAG,GAAGD,SAAS,IAAI,IAAzB;AACA,UAAMjC,KAAK,GAAG,GAAGnD,MAAH,CAAUmF,MAAV,CAAd;AAEA,QAAI,CAACA,MAAD,IAAW,CAAChC,KAAK,CAAC1G,MAAtB,EAA8B,OAAOwG,MAAP;AAE9BE,IAAAA,KAAK,CAAC7E,OAAN,CAAegH,KAAD,IAAW;AACvB,UAAIrC,MAAM,CAACxG,MAAX,EAAmBwG,MAAM,IAAIoC,GAAV;AACnBpC,MAAAA,MAAM,IAAIsC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAV;AACD,KAHD;AAKA,WAAOrC,MAAP;AACD,GAbD,CA7a4C,CA4b5C;AACA;;;AACA,WAASO,aAAT,CAAwB8B,KAAxB,EAA+B7B,kBAA/B,EAAmD;AACjD,QAAIR,MAAM,GAAI,IAAGzH,EAAE,CAAC,UAAD,CAAa,GAAhC;AAEA,QAAI8J,KAAK,KAAK9C,SAAV,IAAuB,CAACiB,kBAA5B,EAAgD,OAAO,IAAP;;AAEhD,QAAIA,kBAAJ,EAAwB;AACtBR,MAAAA,MAAM,IAAIQ,kBAAV;AACD,KAFD,MAEO;AACL,cAAQ,OAAO6B,KAAf;AACE,aAAK,QAAL;AACErC,UAAAA,MAAM,IAAK,IAAGqC,KAAM,GAApB;AACA;;AACF,aAAK,QAAL;AACErC,UAAAA,MAAM,IAAIsC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAV;AACA;;AACF;AACErC,UAAAA,MAAM,IAAIqC,KAAV;AARJ;AAUD;;AAED,WAAQ,GAAErC,MAAO,GAAjB;AACD,GAnd2C,CAqd5C;;;AACA,WAASnE,WAAT,GAAwB;AACtB,UAAM4C,QAAQ,GAAG,EAAjB;;AACA,QAAI,OAAO+D,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACC,MAAvC,IAAiDD,OAAO,CAACC,MAAR,CAAeC,OAApE,EAA6E;AAC3E,aAAOzB,IAAI,CAACE,GAAL,CAAS1C,QAAT,EAAmB+D,OAAO,CAACC,MAAR,CAAeC,OAAlC,CAAP;AACD,KAFD,MAEO;AACL,aAAOjE,QAAP;AACD;AACF,GA7d2C,CA+d5C;;;AACA,MAAIkE,OAAO,GAAG,IAAd;;AACAnK,EAAAA,IAAI,CAACmK,OAAL,GAAgBC,GAAD,IAAS;AACtBD,IAAAA,OAAO,GAAGC,GAAV;AACD,GAFD;;AAIApK,EAAAA,IAAI,CAACqK,WAAL,GAAmB,MAAM;AACvB,UAAMvJ,MAAM,GAAGjB,KAAK,CAACkB,kBAAN,EAAf;;AACAD,IAAAA,MAAM,CAACwJ,GAAP,CAAWH,OAAX;AACD,GAHD;;AAKAnK,EAAAA,IAAI,CAACuK,KAAL,GAAa,SAASA,KAAT,CAAgBC,WAAhB,EAA6B;AACxC;AACA;AACAnK,IAAAA,WAAW,GAAG,IAAd;AACAK,IAAAA,aAAa,GAAG,KAAhB;AACAa,IAAAA,MAAM,GAAG,EAAT;AACAC,IAAAA,aAAa,GAAG,KAAhB;AACAwB,IAAAA,MAAM,GAAG+D,SAAT;AACAlF,IAAAA,QAAQ,GAAG,EAAX;AACAG,IAAAA,QAAQ,GAAG,EAAX;AACAO,IAAAA,YAAY,GAAGjD,SAAS,CAACiD,YAAD,EAAe,CAACO,CAAD,EAAI0F,CAAJ,KAAU,CAACgC,WAAW,CAAC1H,CAAD,CAArC,CAAxB;AACA,WAAO9C,IAAP;AACD,GAZD;;AAcA,MAAIyK,MAAJ;;AACAzK,EAAAA,IAAI,CAAC0K,MAAL,GAAc,SAASA,MAAT,GAAmB;AAC/BD,IAAAA,MAAM,GAAG,EAAT;AACAA,IAAAA,MAAM,CAACpK,WAAP,GAAqBA,WAArB;AACAoK,IAAAA,MAAM,CAAC/J,aAAP,GAAuBA,aAAvB;AACA+J,IAAAA,MAAM,CAAClJ,MAAP,GAAgBA,MAAhB;AACAkJ,IAAAA,MAAM,CAACjJ,aAAP,GAAuBA,aAAvB;AACAiJ,IAAAA,MAAM,CAACzH,MAAP,GAAgBA,MAAhB;AACAyH,IAAAA,MAAM,CAAC5I,QAAP,GAAkBA,QAAlB;AACA4I,IAAAA,MAAM,CAACzI,QAAP,GAAkBA,QAAlB;AACAyI,IAAAA,MAAM,CAAClI,YAAP,GAAsBA,YAAtB;AACD,GAVD;;AAWAvC,EAAAA,IAAI,CAAC2K,QAAL,GAAgB,SAASA,QAAT,GAAqB;AACnCtK,IAAAA,WAAW,GAAGoK,MAAM,CAACpK,WAArB;AACAK,IAAAA,aAAa,GAAG+J,MAAM,CAAC/J,aAAvB;AACAa,IAAAA,MAAM,GAAGkJ,MAAM,CAAClJ,MAAhB;AACAC,IAAAA,aAAa,GAAGiJ,MAAM,CAACjJ,aAAvB;AACAwB,IAAAA,MAAM,GAAGyH,MAAM,CAACzH,MAAhB;AACAnB,IAAAA,QAAQ,GAAG4I,MAAM,CAAC5I,QAAlB;AACAG,IAAAA,QAAQ,GAAGyI,MAAM,CAACzI,QAAlB;AACAO,IAAAA,YAAY,GAAGkI,MAAM,CAAClI,YAAtB;AACAkI,IAAAA,MAAM,GAAG1D,SAAT;AACD,GAVD;;AAYA,SAAO/G,IAAP;AACD,CAjhBD","sourcesContent":["'use strict'\n// this file handles outputting usage instructions,\n// failures, etc. keeps logging in one place.\nconst decamelize = require('./decamelize')\nconst stringWidth = require('string-width')\nconst objFilter = require('./obj-filter')\nconst path = require('path')\nconst setBlocking = require('set-blocking')\nconst YError = require('./yerror')\n\nmodule.exports = function usage (yargs, y18n) {\n  const __ = y18n.__\n  const self = {}\n\n  // methods for ouputting/building failure message.\n  const fails = []\n  self.failFn = function failFn (f) {\n    fails.push(f)\n  }\n\n  let failMessage = null\n  let showHelpOnFail = true\n  self.showHelpOnFail = function showHelpOnFailFn (enabled, message) {\n    if (typeof enabled === 'string') {\n      message = enabled\n      enabled = true\n    } else if (typeof enabled === 'undefined') {\n      enabled = true\n    }\n    failMessage = message\n    showHelpOnFail = enabled\n    return self\n  }\n\n  let failureOutput = false\n  self.fail = function fail (msg, err) {\n    const logger = yargs._getLoggerInstance()\n\n    if (fails.length) {\n      for (let i = fails.length - 1; i >= 0; --i) {\n        fails[i](msg, err, self)\n      }\n    } else {\n      if (yargs.getExitProcess()) setBlocking(true)\n\n      // don't output failure message more than once\n      if (!failureOutput) {\n        failureOutput = true\n        if (showHelpOnFail) {\n          yargs.showHelp('error')\n          logger.error()\n        }\n        if (msg || err) logger.error(msg || err)\n        if (failMessage) {\n          if (msg || err) logger.error('')\n          logger.error(failMessage)\n        }\n      }\n\n      err = err || new YError(msg)\n      if (yargs.getExitProcess()) {\n        return yargs.exit(1)\n      } else if (yargs._hasParseCallback()) {\n        return yargs.exit(1, err)\n      } else {\n        throw err\n      }\n    }\n  }\n\n  // methods for ouputting/building help (usage) message.\n  let usages = []\n  let usageDisabled = false\n  self.usage = (msg, description) => {\n    if (msg === null) {\n      usageDisabled = true\n      usages = []\n      return\n    }\n    usageDisabled = false\n    usages.push([msg, description || ''])\n    return self\n  }\n  self.getUsage = () => {\n    return usages\n  }\n  self.getUsageDisabled = () => {\n    return usageDisabled\n  }\n\n  self.getPositionalGroupName = () => {\n    return __('Positionals:')\n  }\n\n  let examples = []\n  self.example = (cmd, description) => {\n    examples.push([cmd, description || ''])\n  }\n\n  let commands = []\n  self.command = function command (cmd, description, isDefault, aliases) {\n    // the last default wins, so cancel out any previously set default\n    if (isDefault) {\n      commands = commands.map((cmdArray) => {\n        cmdArray[2] = false\n        return cmdArray\n      })\n    }\n    commands.push([cmd, description || '', isDefault, aliases])\n  }\n  self.getCommands = () => commands\n\n  let descriptions = {}\n  self.describe = function describe (key, desc) {\n    if (typeof key === 'object') {\n      Object.keys(key).forEach((k) => {\n        self.describe(k, key[k])\n      })\n    } else {\n      descriptions[key] = desc\n    }\n  }\n  self.getDescriptions = () => descriptions\n\n  let epilog\n  self.epilog = (msg) => {\n    epilog = msg\n  }\n\n  let wrapSet = false\n  let wrap\n  self.wrap = (cols) => {\n    wrapSet = true\n    wrap = cols\n  }\n\n  function getWrap () {\n    if (!wrapSet) {\n      wrap = windowWidth()\n      wrapSet = true\n    }\n\n    return wrap\n  }\n\n  const deferY18nLookupPrefix = '__yargsString__:'\n  self.deferY18nLookup = str => deferY18nLookupPrefix + str\n\n  const defaultGroup = 'Options:'\n  self.help = function help () {\n    normalizeAliases()\n\n    // handle old demanded API\n    const base$0 = path.basename(yargs.$0)\n    const demandedOptions = yargs.getDemandedOptions()\n    const demandedCommands = yargs.getDemandedCommands()\n    const groups = yargs.getGroups()\n    const options = yargs.getOptions()\n\n    let keys = []\n    keys = keys.concat(Object.keys(descriptions))\n    keys = keys.concat(Object.keys(demandedOptions))\n    keys = keys.concat(Object.keys(demandedCommands))\n    keys = keys.concat(Object.keys(options.default))\n    keys = keys.filter(filterHiddenOptions)\n    keys = Object.keys(keys.reduce((acc, key) => {\n      if (key !== '_') acc[key] = true\n      return acc\n    }, {}))\n\n    const theWrap = getWrap()\n    const ui = require('cliui')({\n      width: theWrap,\n      wrap: !!theWrap\n    })\n\n    // the usage string.\n    if (!usageDisabled) {\n      if (usages.length) {\n        // user-defined usage.\n        usages.forEach((usage) => {\n          ui.div(`${usage[0].replace(/\\$0/g, base$0)}`)\n          if (usage[1]) {\n            ui.div({ text: `${usage[1]}`, padding: [1, 0, 0, 0] })\n          }\n        })\n        ui.div()\n      } else if (commands.length) {\n        let u = null\n        // demonstrate how commands are used.\n        if (demandedCommands._) {\n          u = `${base$0} <${__('command')}>\\n`\n        } else {\n          u = `${base$0} [${__('command')}]\\n`\n        }\n        ui.div(`${u}`)\n      }\n    }\n\n    // your application's commands, i.e., non-option\n    // arguments populated in '_'.\n    if (commands.length) {\n      ui.div(__('Commands:'))\n\n      const context = yargs.getContext()\n      const parentCommands = context.commands.length ? `${context.commands.join(' ')} ` : ''\n\n      if (yargs.getParserConfiguration()['sort-commands'] === true) {\n        commands = commands.sort((a, b) => a[0].localeCompare(b[0]))\n      }\n\n      commands.forEach((command) => {\n        const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\\$0 ?/, '')}` // drop $0 from default commands.\n        ui.span(\n          {\n            text: commandString,\n            padding: [0, 2, 0, 2],\n            width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4\n          },\n          { text: command[1] }\n        )\n        const hints = []\n        if (command[2]) hints.push(`[${__('default:').slice(0, -1)}]`) // TODO hacking around i18n here\n        if (command[3] && command[3].length) {\n          hints.push(`[${__('aliases:')} ${command[3].join(', ')}]`)\n        }\n        if (hints.length) {\n          ui.div({ text: hints.join(' '), padding: [0, 0, 0, 2], align: 'right' })\n        } else {\n          ui.div()\n        }\n      })\n\n      ui.div()\n    }\n\n    // perform some cleanup on the keys array, making it\n    // only include top-level keys not their aliases.\n    const aliasKeys = (Object.keys(options.alias) || [])\n      .concat(Object.keys(yargs.parsed.newAliases) || [])\n\n    keys = keys.filter(key => !yargs.parsed.newAliases[key] && aliasKeys.every(alias => (options.alias[alias] || []).indexOf(key) === -1))\n\n    // populate 'Options:' group with any keys that have not\n    // explicitly had a group set.\n    if (!groups[defaultGroup]) groups[defaultGroup] = []\n    addUngroupedKeys(keys, options.alias, groups)\n\n    // display 'Options:' table along with any custom tables:\n    Object.keys(groups).forEach((groupName) => {\n      if (!groups[groupName].length) return\n\n      // if we've grouped the key 'f', but 'f' aliases 'foobar',\n      // normalizedKeys should contain only 'foobar'.\n      const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map((key) => {\n        if (~aliasKeys.indexOf(key)) return key\n        for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== undefined; i++) {\n          if (~(options.alias[aliasKey] || []).indexOf(key)) return aliasKey\n        }\n        return key\n      })\n\n      if (normalizedKeys.length < 1) return\n\n      ui.div(__(groupName))\n\n      // actually generate the switches string --foo, -f, --bar.\n      const switches = normalizedKeys.reduce((acc, key) => {\n        acc[key] = [ key ].concat(options.alias[key] || [])\n          .map(sw => {\n            // for the special positional group don't\n            // add '--' or '-' prefix.\n            if (groupName === self.getPositionalGroupName()) return sw\n            else return (sw.length > 1 ? '--' : '-') + sw\n          })\n          .join(', ')\n\n        return acc\n      }, {})\n\n      normalizedKeys.forEach((key) => {\n        const kswitch = switches[key]\n        let desc = descriptions[key] || ''\n        let type = null\n\n        if (~desc.lastIndexOf(deferY18nLookupPrefix)) desc = __(desc.substring(deferY18nLookupPrefix.length))\n\n        if (~options.boolean.indexOf(key)) type = `[${__('boolean')}]`\n        if (~options.count.indexOf(key)) type = `[${__('count')}]`\n        if (~options.string.indexOf(key)) type = `[${__('string')}]`\n        if (~options.normalize.indexOf(key)) type = `[${__('string')}]`\n        if (~options.array.indexOf(key)) type = `[${__('array')}]`\n        if (~options.number.indexOf(key)) type = `[${__('number')}]`\n\n        const extra = [\n          type,\n          (key in demandedOptions) ? `[${__('required')}]` : null,\n          options.choices && options.choices[key] ? `[${__('choices:')} ${\n            self.stringifiedValues(options.choices[key])}]` : null,\n          defaultString(options.default[key], options.defaultDescription[key])\n        ].filter(Boolean).join(' ')\n\n        ui.span(\n          { text: kswitch, padding: [0, 2, 0, 2], width: maxWidth(switches, theWrap) + 4 },\n          desc\n        )\n\n        if (extra) ui.div({ text: extra, padding: [0, 0, 0, 2], align: 'right' })\n        else ui.div()\n      })\n\n      ui.div()\n    })\n\n    // describe some common use-cases for your application.\n    if (examples.length) {\n      ui.div(__('Examples:'))\n\n      examples.forEach((example) => {\n        example[0] = example[0].replace(/\\$0/g, base$0)\n      })\n\n      examples.forEach((example) => {\n        if (example[1] === '') {\n          ui.div(\n            {\n              text: example[0],\n              padding: [0, 2, 0, 2]\n            }\n          )\n        } else {\n          ui.div(\n            {\n              text: example[0],\n              padding: [0, 2, 0, 2],\n              width: maxWidth(examples, theWrap) + 4\n            }, {\n              text: example[1]\n            }\n          )\n        }\n      })\n\n      ui.div()\n    }\n\n    // the usage string.\n    if (epilog) {\n      const e = epilog.replace(/\\$0/g, base$0)\n      ui.div(`${e}\\n`)\n    }\n\n    // Remove the trailing white spaces\n    return ui.toString().replace(/\\s*$/, '')\n  }\n\n  // return the maximum width of a string\n  // in the left-hand column of a table.\n  function maxWidth (table, theWrap, modifier) {\n    let width = 0\n\n    // table might be of the form [leftColumn],\n    // or {key: leftColumn}\n    if (!Array.isArray(table)) {\n      table = Object.keys(table).map(key => [table[key]])\n    }\n\n    table.forEach((v) => {\n      width = Math.max(\n        stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]),\n        width\n      )\n    })\n\n    // if we've enabled 'wrap' we should limit\n    // the max-width of the left-column.\n    if (theWrap) width = Math.min(width, parseInt(theWrap * 0.5, 10))\n\n    return width\n  }\n\n  // make sure any options set for aliases,\n  // are copied to the keys being aliased.\n  function normalizeAliases () {\n    // handle old demanded API\n    const demandedOptions = yargs.getDemandedOptions()\n    const options = yargs.getOptions()\n\n    ;(Object.keys(options.alias) || []).forEach((key) => {\n      options.alias[key].forEach((alias) => {\n        // copy descriptions.\n        if (descriptions[alias]) self.describe(key, descriptions[alias])\n        // copy demanded.\n        if (alias in demandedOptions) yargs.demandOption(key, demandedOptions[alias])\n        // type messages.\n        if (~options.boolean.indexOf(alias)) yargs.boolean(key)\n        if (~options.count.indexOf(alias)) yargs.count(key)\n        if (~options.string.indexOf(alias)) yargs.string(key)\n        if (~options.normalize.indexOf(alias)) yargs.normalize(key)\n        if (~options.array.indexOf(alias)) yargs.array(key)\n        if (~options.number.indexOf(alias)) yargs.number(key)\n      })\n    })\n  }\n\n  // given a set of keys, place any keys that are\n  // ungrouped under the 'Options:' grouping.\n  function addUngroupedKeys (keys, aliases, groups) {\n    let groupedKeys = []\n    let toCheck = null\n    Object.keys(groups).forEach((group) => {\n      groupedKeys = groupedKeys.concat(groups[group])\n    })\n\n    keys.forEach((key) => {\n      toCheck = [key].concat(aliases[key])\n      if (!toCheck.some(k => groupedKeys.indexOf(k) !== -1)) {\n        groups[defaultGroup].push(key)\n      }\n    })\n    return groupedKeys\n  }\n\n  function filterHiddenOptions (key) {\n    return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt]\n  }\n\n  self.showHelp = (level) => {\n    const logger = yargs._getLoggerInstance()\n    if (!level) level = 'error'\n    const emit = typeof level === 'function' ? level : logger[level]\n    emit(self.help())\n  }\n\n  self.functionDescription = (fn) => {\n    const description = fn.name ? decamelize(fn.name, '-') : __('generated-value')\n    return ['(', description, ')'].join('')\n  }\n\n  self.stringifiedValues = function stringifiedValues (values, separator) {\n    let string = ''\n    const sep = separator || ', '\n    const array = [].concat(values)\n\n    if (!values || !array.length) return string\n\n    array.forEach((value) => {\n      if (string.length) string += sep\n      string += JSON.stringify(value)\n    })\n\n    return string\n  }\n\n  // format the default-value-string displayed in\n  // the right-hand column.\n  function defaultString (value, defaultDescription) {\n    let string = `[${__('default:')} `\n\n    if (value === undefined && !defaultDescription) return null\n\n    if (defaultDescription) {\n      string += defaultDescription\n    } else {\n      switch (typeof value) {\n        case 'string':\n          string += `\"${value}\"`\n          break\n        case 'object':\n          string += JSON.stringify(value)\n          break\n        default:\n          string += value\n      }\n    }\n\n    return `${string}]`\n  }\n\n  // guess the width of the console window, max-width 80.\n  function windowWidth () {\n    const maxWidth = 80\n    if (typeof process === 'object' && process.stdout && process.stdout.columns) {\n      return Math.min(maxWidth, process.stdout.columns)\n    } else {\n      return maxWidth\n    }\n  }\n\n  // logic for displaying application version.\n  let version = null\n  self.version = (ver) => {\n    version = ver\n  }\n\n  self.showVersion = () => {\n    const logger = yargs._getLoggerInstance()\n    logger.log(version)\n  }\n\n  self.reset = function reset (localLookup) {\n    // do not reset wrap here\n    // do not reset fails here\n    failMessage = null\n    failureOutput = false\n    usages = []\n    usageDisabled = false\n    epilog = undefined\n    examples = []\n    commands = []\n    descriptions = objFilter(descriptions, (k, v) => !localLookup[k])\n    return self\n  }\n\n  let frozen\n  self.freeze = function freeze () {\n    frozen = {}\n    frozen.failMessage = failMessage\n    frozen.failureOutput = failureOutput\n    frozen.usages = usages\n    frozen.usageDisabled = usageDisabled\n    frozen.epilog = epilog\n    frozen.examples = examples\n    frozen.commands = commands\n    frozen.descriptions = descriptions\n  }\n  self.unfreeze = function unfreeze () {\n    failMessage = frozen.failMessage\n    failureOutput = frozen.failureOutput\n    usages = frozen.usages\n    usageDisabled = frozen.usageDisabled\n    epilog = frozen.epilog\n    examples = frozen.examples\n    commands = frozen.commands\n    descriptions = frozen.descriptions\n    frozen = undefined\n  }\n\n  return self\n}\n"]},"metadata":{},"sourceType":"script"}