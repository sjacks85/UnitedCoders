{"ast":null,"code":"import { setMessage } from './Message.js';\nimport React, { Component } from 'react';\n\nvar io = require('socket.io-client'); // var CARDS = require('./game_data/cards.json');\n\n\nvar myArgs = process.argv.slice(2);\nvar cards; // Start socket and export it for others to use\n\nvar url = \"http://localhost:5000\";\nconst socket = io.connect(url);\nexport { socket }; // Called by App to join\n\nconst startClient = function (port) {\n  socket.on('connect', function () {\n    socket.emit('join', port);\n  });\n}; // socket.on('turn', data => {\n//     console.log(data);\n//     alert(\"CLIENTMANAGER: Your turn to make suggestion\");\n//     var suggestion = {\n//         \"suspect\": \"peacock\",\n//         \"weapon\": \"gun\",\n//         \"room\": \"kitchen\"\n//     };\n//     //sendSuggestion(suggestion);\n// });\n\n\nsocket.on('assignCards', data => {\n  cards = data;\n  console.log(\"Cards:\", cards);\n});\nsocket.on('Do you have?', suggestion => {\n  alert('do you have any of these cards?: ' + JSON.stringify(suggestion));\n  socket.emit('I have gun');\n});\nsocket.on(\"Has your card\", response => {\n  alert('Has your card:' + response);\n  console.log(response);\n}); // Messages to server from client, called by user input\n\nfunction makeMovement(move, room) {\n  // “movement_made”:\n  // “movement_id”:\n  // }\n  // movement_made (bool) - True if the player has moved to a new location, false otherwise. \n  // new_location (int) - The unique ID of the chosen movement option. \n  var movement = {\n    \"movement_made\": move,\n    \"movement_id\": 1 //KPC - Hardcoded\n\n  };\n  console.log('movement request: ' + move + room);\n  console.log(\"makeMovement: \" + JSON.stringify(movement));\n  socket.emit('movement', movement);\n  socket.emit('game', movement);\n  socket.emit(41, movement);\n}\n\nfunction makeSuggestion(person, room, weapon) {\n  // “suggested_character”:\n  // “suggested_weapon”:\n  // }\n  // suggested_character (String) - The name of the character that was suggested.\n  // suggested_weapon (String) - The name ID if the weapon that was suggested.\n  var suggestion = {\n    \"suspect\": person,\n    \"weapon\": weapon,\n    \"room\": room\n  };\n  console.log(\"makeSuggestion: \" + JSON.stringify(suggestion));\n  socket.emit('suggestion', suggestion);\n}\n\nfunction makeDisprove(disprove, card) {\n  // “suggestion_id”:\n  // “can_disprove”:\n  // “disprove_card”:\n  // }\n  // suggestion_id (int) - The unique ID of the suggestion being disproven.\n  // can_disprove (bool) - True if the suggestion is disproved, false otherwise.\n  // disprove_card (String) - The card used to disprove the suggestion; only populated if can_disprove is true.\n  var disprove = {\n    \"disprove\": disprove,\n    \"card\": card\n  };\n  console.log(\"makeDisprove: \" + JSON.stringify(disprove));\n  socket.emit('I have', card);\n}\n\nfunction makeAccusation(accuse, person, room, weapon) {\n  // “accused_room”:\n  // “accused_character”:\n  // “accused_weapon”:\n  // }\n  // accused-room (String) - The name of the room that was accused. \n  // accused_character (String) - The name of the character that was accused.\n  // accused_weapon (String) - The name ID if the weapon that was accused.\n  var accusation = {\n    \"accusation\": accuse,\n    \"suspect\": person,\n    \"weapon\": weapon,\n    \"room\": room\n  };\n  console.log(\"makeAccusation: \" + JSON.stringify(accusation));\n  socket.emit('accusation', accusation);\n}\n\nexport { startClient, makeMovement, makeSuggestion, makeDisprove, makeAccusation };","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/ClientManager.js"],"names":["setMessage","React","Component","io","require","myArgs","process","argv","slice","cards","url","socket","connect","startClient","port","on","emit","data","console","log","suggestion","alert","JSON","stringify","response","makeMovement","move","room","movement","makeSuggestion","person","weapon","makeDisprove","disprove","card","makeAccusation","accuse","accusation"],"mappings":"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","sourcesContent":["\nimport { setMessage } from './Message.js'\nimport React, { Component } from 'react';\n\nvar io = require('socket.io-client');\n\n// var CARDS = require('./game_data/cards.json');\n\nvar myArgs = process.argv.slice(2);\nvar cards;\n\n// Start socket and export it for others to use\nvar url = \"http://localhost:5000\";\nconst socket = io.connect(url);\nexport { socket }\n\n// Called by App to join\nconst startClient = function(port) {\n    \n    socket.on('connect', function () {\n        socket.emit('join', port);\n    });\n\n};\n\n// socket.on('turn', data => {\n//     console.log(data);\n//     alert(\"CLIENTMANAGER: Your turn to make suggestion\");\n    \n//     var suggestion = {\n//         \"suspect\": \"peacock\",\n//         \"weapon\": \"gun\",\n//         \"room\": \"kitchen\"\n//     };\n\n//     //sendSuggestion(suggestion);\n// });\n\nsocket.on('assignCards', data => {\n    cards = data;\n    console.log(\"Cards:\", cards);\n});\n\nsocket.on('Do you have?', suggestion => {\n    alert('do you have any of these cards?: ' + JSON.stringify(suggestion))\n    socket.emit('I have gun');\n});\n\nsocket.on(\"Has your card\", (response) => {\n    alert('Has your card:' + response)\n    console.log(response)\n})\n\n// Messages to server from client, called by user input\nfunction makeMovement(move, room) {\n\n        // “movement_made”:\n        // “movement_id”:\n        // }\n        // movement_made (bool) - True if the player has moved to a new location, false otherwise. \n        // new_location (int) - The unique ID of the chosen movement option. \n        \n    var movement = {\n        \"movement_made\" : move,\n        \"movement_id\": 1, //KPC - Hardcoded\n    };\n    console.log('movement request: ' + move + room)    \n    console.log(\"makeMovement: \" + JSON.stringify(movement));\n    socket.emit('movement', movement);\n    socket.emit('game', movement);\n    socket.emit(41, movement)\n}\n\nfunction makeSuggestion(person, room, weapon) {\n\n        // “suggested_character”:\n        // “suggested_weapon”:\n        // }\n        // suggested_character (String) - The name of the character that was suggested.\n        // suggested_weapon (String) - The name ID if the weapon that was suggested.\n        \n    var suggestion = {\n        \"suspect\": person,\n        \"weapon\": weapon,\n        \"room\": room\n    };\n    console.log(\"makeSuggestion: \" + JSON.stringify(suggestion));\n    socket.emit('suggestion', suggestion);\n}\n\nfunction makeDisprove(disprove, card) {\n\n    // “suggestion_id”:\n    // “can_disprove”:\n    // “disprove_card”:\n    // }\n    // suggestion_id (int) - The unique ID of the suggestion being disproven.\n    // can_disprove (bool) - True if the suggestion is disproved, false otherwise.\n    // disprove_card (String) - The card used to disprove the suggestion; only populated if can_disprove is true.\n    \n    var disprove = {\n        \"disprove\" : disprove,\n        \"card\" : card\n    }\n    console.log(\"makeDisprove: \" + JSON.stringify(disprove));\n    socket.emit('I have', card);\n}\n\nfunction makeAccusation(accuse, person, room, weapon) {\n\n        // “accused_room”:\n        // “accused_character”:\n        // “accused_weapon”:\n        // }\n        // accused-room (String) - The name of the room that was accused. \n        // accused_character (String) - The name of the character that was accused.\n        // accused_weapon (String) - The name ID if the weapon that was accused.\n        \n    var accusation = {\n        \"accusation\": accuse,\n        \"suspect\": person,\n        \"weapon\": weapon,\n        \"room\": room\n    };\n    console.log(\"makeAccusation: \" + JSON.stringify(accusation));\n    socket.emit('accusation', accusation);\n}\n\nexport { startClient, makeMovement, makeSuggestion, makeDisprove, makeAccusation };"]},"metadata":{},"sourceType":"module"}