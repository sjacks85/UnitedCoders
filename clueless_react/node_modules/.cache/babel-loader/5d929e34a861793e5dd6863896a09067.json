{"ast":null,"code":"// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n\n  argString = argString.trim();\n  var i = 0;\n  var prevC = null;\n  var c = null;\n  var opening = null;\n  var args = [];\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii); // split on spaces unless we're in quotes.\n\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n\n      continue;\n    } // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n\n\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n\n  return args;\n};","map":{"version":3,"sources":["/Users/sidneyjackson/Desktop/GitHub Projects/UnitedCoders/clueless_react/node_modules/yargs-parser/lib/tokenize-arg-string.js"],"names":["module","exports","argString","Array","isArray","map","e","trim","i","prevC","c","opening","args","ii","length","charAt"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACpC,MAAIC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC5B,WAAOA,SAAS,CAACG,GAAV,CAAcC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAC,GAAG,EAA5B,GAAiCA,CAApD,CAAP;AACD;;AAEDJ,EAAAA,SAAS,GAAGA,SAAS,CAACK,IAAV,EAAZ;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,CAAC,GAAG,IAAR;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGX,SAAS,CAACY,MAAhC,EAAwCD,EAAE,EAA1C,EAA8C;AAC5CJ,IAAAA,KAAK,GAAGC,CAAR;AACAA,IAAAA,CAAC,GAAGR,SAAS,CAACa,MAAV,CAAiBF,EAAjB,CAAJ,CAF4C,CAI5C;;AACA,QAAIH,CAAC,KAAK,GAAN,IAAa,CAACC,OAAlB,EAA2B;AACzB,UAAI,EAAEF,KAAK,KAAK,GAAZ,CAAJ,EAAsB;AACpBD,QAAAA,CAAC;AACF;;AACD;AACD,KAV2C,CAY5C;AACA;;;AACA,QAAIE,CAAC,KAAKC,OAAV,EAAmB;AACjBA,MAAAA,OAAO,GAAG,IAAV;AACD,KAFD,MAEO,IAAI,CAACD,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAApB,KAA4B,CAACC,OAAjC,EAA0C;AAC/CA,MAAAA,OAAO,GAAGD,CAAV;AACD;;AAED,QAAI,CAACE,IAAI,CAACJ,CAAD,CAAT,EAAcI,IAAI,CAACJ,CAAD,CAAJ,GAAU,EAAV;AACdI,IAAAA,IAAI,CAACJ,CAAD,CAAJ,IAAWE,CAAX;AACD;;AAED,SAAOE,IAAP;AACD,CAtCD","sourcesContent":["// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e)\n  }\n\n  argString = argString.trim()\n\n  var i = 0\n  var prevC = null\n  var c = null\n  var opening = null\n  var args = []\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    prevC = c\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++\n      }\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n"]},"metadata":{},"sourceType":"script"}