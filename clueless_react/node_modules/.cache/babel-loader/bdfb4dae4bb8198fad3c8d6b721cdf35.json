{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport { startClient, socket } from \"./ClientManager\";\nvar uniqueIDs = [{\n  type: \"character\",\n  name: \"Miss Scarlet\",\n  image: \"P1\"\n}, {\n  type: \"character\",\n  name: \"Mr. Green\",\n  image: \"P2\"\n}, {\n  type: \"character\",\n  name: \"Colonel Mustard\",\n  image: \"P3\"\n}, {\n  type: \"character\",\n  name: \"Prof. Plum\",\n  image: \"P4\"\n}, {\n  type: \"character\",\n  name: \"Mrs. Peacock\",\n  image: \"P5\"\n}, {\n  type: \"character\",\n  name: \"Mrs. White\",\n  image: \"P6\"\n}, {\n  type: \"weapon\",\n  name: \"Candlestick\",\n  image: \"W1\"\n}, {\n  type: \"weapon\",\n  name: \"Revolver\",\n  image: \"W2\"\n}, {\n  type: \"weapon\",\n  name: \"Knife\",\n  image: \"W3\"\n}, {\n  type: \"weapon\",\n  name: \"Pipe\",\n  image: \"W4\"\n}, {\n  type: \"weapon\",\n  name: \"Rope\",\n  image: \"W5\"\n}, {\n  type: \"weapon\",\n  name: \"Wrench\",\n  image: \"W6\"\n}, {\n  type: \"room\",\n  name: \"Study\"\n}, {\n  type: \"room\",\n  name: \"Hall\"\n}, {\n  type: \"room\",\n  name: \"Lounge\"\n}, {\n  type: \"room\",\n  name: \"Dinning\"\n}, {\n  type: \"room\",\n  name: \"Billiard\"\n}, {\n  type: \"room\",\n  name: \"Library\"\n}, {\n  type: \"room\",\n  name: \"Conservatory\"\n}, {\n  type: \"room\",\n  name: \"Ballroom\"\n}, {\n  type: \"room\",\n  name: \"Kitchen\"\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Store in the App, and passed into children as props\n      actions: [],\n      player_id: 0,\n      character: \"\",\n      cards: {}\n    };\n  }\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", message => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n      this.setState({\n        actions: [message, ...this.state.actions]\n      });\n      if (message.message_type == 11) if (message.message.username != undefined) if (message.message.username != undefined) if (message.message.username == window.location.port) {\n        this.setState({\n          player_id: message.message.player_id,\n          character: message.message.character,\n          cards: message.message.cards\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"Gameboard\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, \"Username = \", window.location.port), /*#__PURE__*/React.createElement(Gameboard, {\n      actions: this.state.actions,\n      player_id: \"P\" + this.state.player_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Divider, {\n      actions: this.state.actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/App.js"],"names":["React","Divider","Gameboard","startClient","socket","uniqueIDs","type","name","image","App","Component","constructor","props","state","actions","player_id","character","cards","componentDidMount","window","location","port","on","message","console","log","JSON","stringify","setState","message_type","username","undefined","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Divider from \"./Divider\";\nimport Gameboard from \"./Gameboard\";\nimport { startClient, socket } from \"./ClientManager\";\n\nvar uniqueIDs = [\n  { type: \"character\", name: \"Miss Scarlet\", image: \"P1\" },\n  { type: \"character\", name: \"Mr. Green\", image: \"P2\" },\n  { type: \"character\", name: \"Colonel Mustard\", image: \"P3\" },\n  { type: \"character\", name: \"Prof. Plum\", image: \"P4\" },\n  { type: \"character\", name: \"Mrs. Peacock\", image: \"P5\" },\n  { type: \"character\", name: \"Mrs. White\", image: \"P6\" },\n  { type: \"weapon\", name: \"Candlestick\", image: \"W1\" },\n  { type: \"weapon\", name: \"Revolver\", image: \"W2\" },\n  { type: \"weapon\", name: \"Knife\", image: \"W3\" },\n  { type: \"weapon\", name: \"Pipe\", image: \"W4\" },\n  { type: \"weapon\", name: \"Rope\", image: \"W5\" },\n  { type: \"weapon\", name: \"Wrench\", image: \"W6\" },\n  { type: \"room\", name: \"Study\" },\n  { type: \"room\", name: \"Hall\" },\n  { type: \"room\", name: \"Lounge\" },\n  { type: \"room\", name: \"Dinning\" },\n  { type: \"room\", name: \"Billiard\" },\n  { type: \"room\", name: \"Library\" },\n  { type: \"room\", name: \"Conservatory\" },\n  { type: \"room\", name: \"Ballroom\" },\n  { type: \"room\", name: \"Kitchen\" },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    // Store in the App, and passed into children as props\n    actions: [],\n    player_id: 0,\n    character: \"\",\n    cards: {},\n  };\n\n  componentDidMount() {\n    startClient(window.location.port);\n    socket.on(\"game\", (message) => {\n      console.log(\"GameMessage\" + JSON.stringify(message));\n\n      this.setState({ actions: [message, ...this.state.actions] });\n      if (message.message_type == 11)\n        if (message.message.username != undefined)\n          if (message.message.username != undefined)\n            if (message.message.username == window.location.port) {\n              this.setState({\n                player_id: message.message.player_id,\n                character: message.message.character,\n                cards: message.message.cards,\n              });\n            }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"bottom\">\n          <h1>Gameboard</h1>\n          <p>Username = {window.location.port}</p>\n          <Gameboard\n            actions={this.state.actions}\n            player_id={\"P\" + this.state.player_id}\n          />\n        </div>\n        <div className=\"bottom\">\n          <Divider actions={this.state.actions} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}