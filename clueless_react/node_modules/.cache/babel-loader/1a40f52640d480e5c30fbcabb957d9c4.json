{"ast":null,"code":"'use strict';\n\nconst stringWidth = require('string-width');\n\nconst stripAnsi = require('strip-ansi');\n\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set(['\\u001B', '\\u009B']);\nconst END_CODE = 39;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}[${code}m`; // Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\n\n\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character)); // Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\n\n\nconst wrapWord = (rows, word, columns) => {\n  const characters = [...word];\n  let insideEscape = false;\n  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n  for (const [index, character] of characters.entries()) {\n    const characterLength = stringWidth(character);\n\n    if (visible + characterLength <= columns) {\n      rows[rows.length - 1] += character;\n    } else {\n      rows.push(character);\n      visible = 0;\n    }\n\n    if (ESCAPES.has(character)) {\n      insideEscape = true;\n    } else if (insideEscape && character === 'm') {\n      insideEscape = false;\n      continue;\n    }\n\n    if (insideEscape) {\n      continue;\n    }\n\n    visible += characterLength;\n\n    if (visible === columns && index < characters.length - 1) {\n      rows.push('');\n      visible = 0;\n    }\n  } // It's possible that the last row we copy over is only\n  // ansi escape characters, handle this edge-case\n\n\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n}; // Trims spaces from a string ignoring invisible sequences\n\n\nconst stringVisibleTrimSpacesRight = str => {\n  const words = str.split(' ');\n  let last = words.length;\n\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n\n    last--;\n  }\n\n  if (last === words.length) {\n    return str;\n  }\n\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n}; // The wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more\n// than columns characters\n//\n// 'soft' allows long words to expand past the column length\n\n\nconst exec = (string, columns, options = {}) => {\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n\n  let pre = '';\n  let ret = '';\n  let escapeCode;\n  const lengths = wordLengths(string);\n  let rows = [''];\n\n  for (const [index, word] of string.split(' ').entries()) {\n    if (options.trim !== false) {\n      rows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n    }\n\n    let rowLength = stringWidth(rows[rows.length - 1]);\n\n    if (index !== 0) {\n      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n        // If we start with a new word but the current row length equals the length of the columns, add a new row\n        rows.push('');\n        rowLength = 0;\n      }\n\n      if (rowLength > 0 || options.trim === false) {\n        rows[rows.length - 1] += ' ';\n        rowLength++;\n      }\n    } // In 'hard' wrap mode, the length of a line is\n    // never allowed to extend past 'columns'\n\n\n    if (options.hard && lengths[index] > columns) {\n      const remainingColumns = columns - rowLength;\n      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\n      if (breaksStartingNextLine < breaksStartingThisLine) {\n        rows.push('');\n      }\n\n      wrapWord(rows, word, columns);\n      continue;\n    }\n\n    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n      if (options.wordWrap === false && rowLength < columns) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n\n      rows.push('');\n    }\n\n    if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n      wrapWord(rows, word, columns);\n      continue;\n    }\n\n    rows[rows.length - 1] += word;\n  }\n\n  if (options.trim !== false) {\n    rows = rows.map(stringVisibleTrimSpacesRight);\n  }\n\n  pre = rows.join('\\n');\n\n  for (const [index, character] of [...pre].entries()) {\n    ret += character;\n\n    if (ESCAPES.has(character)) {\n      const code = parseFloat(/\\d[^m]*/.exec(pre.slice(index, index + 4)));\n      escapeCode = code === END_CODE ? null : code;\n    }\n\n    const code = ansiStyles.codes.get(Number(escapeCode));\n\n    if (escapeCode && code) {\n      if (pre[index + 1] === '\\n') {\n        ret += wrapAnsi(code);\n      } else if (character === '\\n') {\n        ret += wrapAnsi(escapeCode);\n      }\n    }\n  }\n\n  return ret;\n}; // For each newline, invoke the method separately\n\n\nmodule.exports = (string, columns, options) => {\n  return String(string).normalize().split('\\n').map(line => exec(line, columns, options)).join('\\n');\n};","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/node_modules/wrap-ansi/index.js"],"names":["stringWidth","require","stripAnsi","ansiStyles","ESCAPES","Set","END_CODE","wrapAnsi","code","values","next","value","wordLengths","string","split","map","character","wrapWord","rows","word","columns","characters","insideEscape","visible","length","index","entries","characterLength","push","has","pop","stringVisibleTrimSpacesRight","str","words","last","slice","join","exec","options","trim","pre","ret","escapeCode","lengths","trimLeft","rowLength","wordWrap","hard","remainingColumns","breaksStartingThisLine","Math","floor","breaksStartingNextLine","parseFloat","codes","get","Number","module","exports","String","normalize","line"],"mappings":"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","sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set([\n\t'\\u001B',\n\t'\\u009B'\n]);\n\nconst END_CODE = 39;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}[${code}m`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n\tconst characters = [...word];\n\n\tlet insideEscape = false;\n\tlet visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n\tfor (const [index, character] of characters.entries()) {\n\t\tconst characterLength = stringWidth(character);\n\n\t\tif (visible + characterLength <= columns) {\n\t\t\trows[rows.length - 1] += character;\n\t\t} else {\n\t\t\trows.push(character);\n\t\t\tvisible = 0;\n\t\t}\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tinsideEscape = true;\n\t\t} else if (insideEscape && character === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (insideEscape) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible += characterLength;\n\n\t\tif (visible === columns && index < characters.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// It's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = str => {\n\tconst words = str.split(' ');\n\tlet last = words.length;\n\n\twhile (last > 0) {\n\t\tif (stringWidth(words[last - 1]) > 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast--;\n\t}\n\n\tif (last === words.length) {\n\t\treturn str;\n\t}\n\n\treturn words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more\n// than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n\tif (options.trim !== false && string.trim() === '') {\n\t\treturn '';\n\t}\n\n\tlet pre = '';\n\tlet ret = '';\n\tlet escapeCode;\n\n\tconst lengths = wordLengths(string);\n\tlet rows = [''];\n\n\tfor (const [index, word] of string.split(' ').entries()) {\n\t\tif (options.trim !== false) {\n\t\t\trows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n\t\t}\n\n\t\tlet rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (index !== 0) {\n\t\t\tif (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n\t\t\t\t// If we start with a new word but the current row length equals the length of the columns, add a new row\n\t\t\t\trows.push('');\n\t\t\t\trowLength = 0;\n\t\t\t}\n\n\t\t\tif (rowLength > 0 || options.trim === false) {\n\t\t\t\trows[rows.length - 1] += ' ';\n\t\t\t\trowLength++;\n\t\t\t}\n\t\t}\n\n\t\t// In 'hard' wrap mode, the length of a line is\n\t\t// never allowed to extend past 'columns'\n\t\tif (options.hard && lengths[index] > columns) {\n\t\t\tconst remainingColumns = (columns - rowLength);\n\t\t\tconst breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n\t\t\tconst breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\t\t\tif (breaksStartingNextLine < breaksStartingThisLine) {\n\t\t\t\trows.push('');\n\t\t\t}\n\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < columns) {\n\t\t\t\twrapWord(rows, word, columns);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && options.wordWrap === false) {\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tif (options.trim !== false) {\n\t\trows = rows.map(stringVisibleTrimSpacesRight);\n\t}\n\n\tpre = rows.join('\\n');\n\n\tfor (const [index, character] of [...pre].entries()) {\n\t\tret += character;\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tconst code = parseFloat(/\\d[^m]*/.exec(pre.slice(index, index + 4)));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t}\n\n\t\tconst code = ansiStyles.codes.get(Number(escapeCode));\n\n\t\tif (escapeCode && code) {\n\t\t\tif (pre[index + 1] === '\\n') {\n\t\t\t\tret += wrapAnsi(code);\n\t\t\t} else if (character === '\\n') {\n\t\t\t\tret += wrapAnsi(escapeCode);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n\treturn String(string)\n\t\t.normalize()\n\t\t.split('\\n')\n\t\t.map(line => exec(line, columns, options))\n\t\t.join('\\n');\n};\n"]},"metadata":{},"sourceType":"script"}