{"ast":null,"code":"'use strict';\n\nconst pLimit = require('p-limit');\n\nclass EndError extends Error {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n} // The input can also be a promise, so we `Promise.resolve()` it\n\n\nconst testElement = (el, tester) => Promise.resolve(el).then(tester); // The input can also be a promise, so we `Promise.all()` them both\n\n\nconst finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));\n\nmodule.exports = (iterable, tester, opts) => {\n  opts = Object.assign({\n    concurrency: Infinity,\n    preserveOrder: true\n  }, opts);\n  const limit = pLimit(opts.concurrency); // Start all the promises concurrently with optional limit\n\n  const items = [...iterable].map(el => [el, limit(testElement, el, tester)]); // Check the promises either serially or concurrently\n\n  const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n  return Promise.all(items.map(el => checkLimit(finder, el))).then(() => {}).catch(err => err instanceof EndError ? err.value : Promise.reject(err));\n};","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/node_modules/p-locate/index.js"],"names":["pLimit","require","EndError","Error","constructor","value","testElement","el","tester","Promise","resolve","then","finder","all","val","reject","module","exports","iterable","opts","Object","assign","concurrency","Infinity","preserveOrder","limit","items","map","checkLimit","catch","err"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAMC,QAAN,SAAuBC,KAAvB,CAA6B;AAC5BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB;AACA,SAAKA,KAAL,GAAaA,KAAb;AACA;;AAJ2B,C,CAO7B;;;AACA,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgBC,OAAO,CAACC,OAAR,CAAgBH,EAAhB,EAAoBI,IAApB,CAAyBH,MAAzB,CAApC,C,CAEA;;;AACA,MAAMI,MAAM,GAAGL,EAAE,IAAIE,OAAO,CAACI,GAAR,CAAYN,EAAZ,EAAgBI,IAAhB,CAAqBG,GAAG,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,IAAX,IAAmBL,OAAO,CAACM,MAAR,CAAe,IAAIb,QAAJ,CAAaY,GAAG,CAAC,CAAD,CAAhB,CAAf,CAA/C,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWV,MAAX,EAAmBW,IAAnB,KAA4B;AAC5CA,EAAAA,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc;AACpBC,IAAAA,WAAW,EAAEC,QADO;AAEpBC,IAAAA,aAAa,EAAE;AAFK,GAAd,EAGJL,IAHI,CAAP;AAKA,QAAMM,KAAK,GAAGzB,MAAM,CAACmB,IAAI,CAACG,WAAN,CAApB,CAN4C,CAQ5C;;AACA,QAAMI,KAAK,GAAG,CAAC,GAAGR,QAAJ,EAAcS,GAAd,CAAkBpB,EAAE,IAAI,CAACA,EAAD,EAAKkB,KAAK,CAACnB,WAAD,EAAcC,EAAd,EAAkBC,MAAlB,CAAV,CAAxB,CAAd,CAT4C,CAW5C;;AACA,QAAMoB,UAAU,GAAG5B,MAAM,CAACmB,IAAI,CAACK,aAAL,GAAqB,CAArB,GAAyBD,QAA1B,CAAzB;AAEA,SAAOd,OAAO,CAACI,GAAR,CAAYa,KAAK,CAACC,GAAN,CAAUpB,EAAE,IAAIqB,UAAU,CAAChB,MAAD,EAASL,EAAT,CAA1B,CAAZ,EACLI,IADK,CACA,MAAM,CAAE,CADR,EAELkB,KAFK,CAECC,GAAG,IAAIA,GAAG,YAAY5B,QAAf,GAA0B4B,GAAG,CAACzB,KAA9B,GAAsCI,OAAO,CAACM,MAAR,CAAee,GAAf,CAF9C,CAAP;AAGA,CAjBD","sourcesContent":["'use strict';\nconst pLimit = require('p-limit');\n\nclass EndError extends Error {\n\tconstructor(value) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n}\n\n// The input can also be a promise, so we `Promise.resolve()` it\nconst testElement = (el, tester) => Promise.resolve(el).then(tester);\n\n// The input can also be a promise, so we `Promise.all()` them both\nconst finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));\n\nmodule.exports = (iterable, tester, opts) => {\n\topts = Object.assign({\n\t\tconcurrency: Infinity,\n\t\tpreserveOrder: true\n\t}, opts);\n\n\tconst limit = pLimit(opts.concurrency);\n\n\t// Start all the promises concurrently with optional limit\n\tconst items = [...iterable].map(el => [el, limit(testElement, el, tester)]);\n\n\t// Check the promises either serially or concurrently\n\tconst checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n\n\treturn Promise.all(items.map(el => checkLimit(finder, el)))\n\t\t.then(() => {})\n\t\t.catch(err => err instanceof EndError ? err.value : Promise.reject(err));\n};\n"]},"metadata":{},"sourceType":"script"}