{"ast":null,"code":"var _jsxFileName = \"/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/UserInput.js\";\nimport React from \"react\";\nimport { makeMovement, makeSuggestion, makeAccusation, makeDisprove } from \"./ClientManager\";\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      response: \"\",\n      inputs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.makeSuggestion = this.makeSuggestion.bind(this); // Use when we have endpoints, and back end logic to work with.\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    if (this.state.value === \"\") {\n      alert(\"Don't forget to type an action!\");\n      return;\n    } // Notify User that their action was registered.\n\n\n    let userInput = this.state.value;\n    this.setState({\n      response: userInput\n    }); //alert(\"Player action registered: \" + this.state.value);\n\n    alert(\"User Input: \" + this.state.value);\n    console.log(\"User Input: \" + this.state.value);\n    this.parseMessage(this.state.value);\n    this.setState({\n      value: \"\"\n    });\n    event.preventDefault();\n  }\n\n  makeSuggestion() {\n    const _this = this;\n  }\n\n  parseMessage(playerInput) {\n    let parsedPlayerInput = playerInput.split(/\\s+/); // Can use to differentiate player actions for the back end.\n    // Can place fetch in each block specific to the player action.\n\n    if (parsedPlayerInput[0] === \"Movement:\") {\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeMovement(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else if (parsedPlayerInput[0] === \"Suggestion:\") {\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeSuggestion(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3]);\n    } else if (parsedPlayerInput[0] === \"Accusation:\") {\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeAccusation(parsedPlayerInput[1], parsedPlayerInput[2], parsedPlayerInput[3], parsedPlayerInput[4]);\n    } else if (parsedPlayerInput[0] === \"Disprove:\") {\n      this.setState({\n        inputs: [playerInput, ...this.state.inputs]\n      });\n      makeDisprove(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else {\n      alert(\"This move isn't recognized.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      size: \"50\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Previous Inputs\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, this.state.inputs.map(elem => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, elem)))));\n  }\n\n}\n\nexport default UserInput;","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/UserInput.js"],"names":["React","makeMovement","makeSuggestion","makeAccusation","makeDisprove","UserInput","Component","constructor","props","state","value","response","inputs","handleChange","bind","handleSubmit","event","setState","target","alert","userInput","console","log","parseMessage","preventDefault","_this","playerInput","parsedPlayerInput","split","render","map","elem"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  makeMovement,\n  makeSuggestion,\n  makeAccusation,\n  makeDisprove,\n} from \"./ClientManager\";\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      response: \"\",\n      inputs: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.makeSuggestion = this.makeSuggestion.bind(this); // Use when we have endpoints, and back end logic to work with.\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    if (this.state.value === \"\") {\n      alert(\"Don't forget to type an action!\");\n      return;\n    }\n\n    // Notify User that their action was registered.\n    let userInput = this.state.value;\n    this.setState({ response: userInput });\n    //alert(\"Player action registered: \" + this.state.value);\n\n    alert(\"User Input: \" + this.state.value);\n    console.log(\"User Input: \" + this.state.value);\n    this.parseMessage(this.state.value);\n    this.setState({\n      value: \"\",\n    });\n    event.preventDefault();\n  }\n\n  makeSuggestion() {\n    const _this = this;\n  }\n\n  parseMessage(playerInput) {\n    let parsedPlayerInput = playerInput.split(/\\s+/);\n\n    // Can use to differentiate player actions for the back end.\n    // Can place fetch in each block specific to the player action.\n    if (parsedPlayerInput[0] === \"Movement:\") {\n      this.setState({ inputs: [playerInput, ...this.state.inputs] });\n      makeMovement(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else if (parsedPlayerInput[0] === \"Suggestion:\") {\n      this.setState({ inputs: [playerInput, ...this.state.inputs] });\n      makeSuggestion(\n        parsedPlayerInput[1],\n        parsedPlayerInput[2],\n        parsedPlayerInput[3]\n      );\n    } else if (parsedPlayerInput[0] === \"Accusation:\") {\n      this.setState({ inputs: [playerInput, ...this.state.inputs] });\n      makeAccusation(\n        parsedPlayerInput[1],\n        parsedPlayerInput[2],\n        parsedPlayerInput[3],\n        parsedPlayerInput[4]\n      );\n    } else if (parsedPlayerInput[0] === \"Disprove:\") {\n      this.setState({ inputs: [playerInput, ...this.state.inputs] });\n      makeDisprove(parsedPlayerInput[1], parsedPlayerInput[2]);\n    } else {\n      alert(\"This move isn't recognized.\");\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            size=\"50\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p> </p>\n        <div>\n          <h4>Previous Inputs</h4>\n          <ul>\n            {this.state.inputs.map((elem) => (\n              <li>{elem}</li>\n            ))}\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default UserInput;\n"]},"metadata":{},"sourceType":"module"}