{"ast":null,"code":"'use strict';\n\nconst argsert = require('./lib/argsert');\n\nconst fs = require('fs');\n\nconst Command = require('./lib/command');\n\nconst Completion = require('./lib/completion');\n\nconst Parser = require('yargs-parser');\n\nconst path = require('path');\n\nconst Usage = require('./lib/usage');\n\nconst Validation = require('./lib/validation');\n\nconst Y18n = require('y18n');\n\nconst objFilter = require('./lib/obj-filter');\n\nconst setBlocking = require('set-blocking');\n\nconst applyExtends = require('./lib/apply-extends');\n\nconst {\n  globalMiddlewareFactory\n} = require('./lib/middleware');\n\nconst YError = require('./lib/yerror');\n\nexports = module.exports = Yargs;\n\nfunction Yargs(processArgs, cwd, parentRequire) {\n  processArgs = processArgs || []; // handle calling yargs().\n\n  const self = {};\n  let command = null;\n  let completion = null;\n  let groups = {};\n  let globalMiddleware = [];\n  let output = '';\n  let preservedGroups = {};\n  let usage = null;\n  let validation = null;\n  const y18n = Y18n({\n    directory: path.resolve(__dirname, './locales'),\n    updateFiles: false\n  });\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n  if (!cwd) cwd = process.cwd();\n\n  self.scriptName = function scriptName(scriptName) {\n    self.$0 = scriptName;\n    return self;\n  }; // ignore the node bin, specify this in your\n  // bin file with #!/usr/bin/env node\n\n\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(process.argv[0])) {\n    self.$0 = process.argv.slice(1, 2);\n  } else {\n    self.$0 = process.argv.slice(0, 1);\n  }\n\n  self.$0 = self.$0.map((x, i) => {\n    const b = rebase(cwd, x);\n    return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n  }).join(' ').trim();\n\n  if (process.env._ !== undefined && process.argv[1] === process.env._) {\n    self.$0 = process.env._.replace(`${path.dirname(process.execPath)}/`, '');\n  } // use context object to keep track of resets, subcommand execution, etc\n  // submodules should modify and check the state of context as necessary\n\n\n  const context = {\n    resets: -1,\n    commands: [],\n    fullCommands: [],\n    files: []\n  };\n\n  self.getContext = () => context; // puts yargs back into an initial state. any keys\n  // that have been set to \"global\" will not be reset\n  // by this action.\n\n\n  let options;\n\n  self.resetOptions = self.reset = function resetOptions(aliases) {\n    context.resets++;\n    aliases = aliases || {};\n    options = options || {}; // put yargs back into an initial state, this\n    // logic is used to build a nested command\n    // hierarchy.\n\n    const tmpOptions = {};\n    tmpOptions.local = options.local ? options.local : [];\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : []; // if a key has been explicitly set as local,\n    // we should reset it before passing options to command.\n\n    const localLookup = {};\n    tmpOptions.local.forEach(l => {\n      localLookup[l] = true;\n      (aliases[l] || []).forEach(a => {\n        localLookup[a] = true;\n      });\n    }); // preserve all groups not set to local.\n\n    preservedGroups = Object.keys(groups).reduce((acc, groupName) => {\n      const keys = groups[groupName].filter(key => !(key in localLookup));\n\n      if (keys.length > 0) {\n        acc[groupName] = keys;\n      }\n\n      return acc;\n    }, {}); // groups can now be reset\n\n    groups = {};\n    const arrayOptions = ['array', 'boolean', 'string', 'skipValidation', 'count', 'normalize', 'number', 'hiddenOptions'];\n    const objectOptions = ['narg', 'key', 'alias', 'default', 'defaultDescription', 'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce'];\n    arrayOptions.forEach(k => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k]);\n    });\n    objectOptions.forEach(k => {\n      tmpOptions[k] = objFilter(options[k], (k, v) => !localLookup[k]);\n    });\n    tmpOptions.envPrefix = options.envPrefix;\n    options = tmpOptions; // if this is the first time being executed, create\n    // instances of all our helpers -- otherwise just reset.\n\n    usage = usage ? usage.reset(localLookup) : Usage(self, y18n);\n    validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n);\n    command = command ? command.reset() : Command(self, usage, validation, globalMiddleware);\n    if (!completion) completion = Completion(self, usage, command);\n    completionCommand = null;\n    output = '';\n    exitError = null;\n    hasOutput = false;\n    self.parsed = false;\n    return self;\n  };\n\n  self.resetOptions(); // temporary hack: allow \"freezing\" of reset-able state for parse(msg, cb)\n\n  let frozen;\n\n  function freeze() {\n    frozen = {};\n    frozen.options = options;\n    frozen.configObjects = options.configObjects.slice(0);\n    frozen.exitProcess = exitProcess;\n    frozen.groups = groups;\n    usage.freeze();\n    validation.freeze();\n    command.freeze();\n    frozen.strict = strict;\n    frozen.completionCommand = completionCommand;\n    frozen.output = output;\n    frozen.exitError = exitError;\n    frozen.hasOutput = hasOutput;\n    frozen.parsed = self.parsed;\n  }\n\n  function unfreeze() {\n    options = frozen.options;\n    options.configObjects = frozen.configObjects;\n    exitProcess = frozen.exitProcess;\n    groups = frozen.groups;\n    output = frozen.output;\n    exitError = frozen.exitError;\n    hasOutput = frozen.hasOutput;\n    self.parsed = frozen.parsed;\n    usage.unfreeze();\n    validation.unfreeze();\n    command.unfreeze();\n    strict = frozen.strict;\n    completionCommand = frozen.completionCommand;\n    parseFn = null;\n    parseContext = null;\n    frozen = undefined;\n  }\n\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('boolean', keys);\n    return self;\n  };\n\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('array', keys);\n    return self;\n  };\n\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('number', keys);\n    return self;\n  };\n\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('normalize', keys);\n    return self;\n  };\n\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('count', keys);\n    return self;\n  };\n\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('string', keys);\n    return self;\n  };\n\n  self.requiresArg = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintObject(self.nargs, false, 'narg', keys, 1);\n    return self;\n  };\n\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('skipValidation', keys);\n    return self;\n  };\n\n  function populateParserHintArray(type, keys, value) {\n    keys = [].concat(keys);\n    keys.forEach(key => {\n      key = sanitizeKey(key);\n      options[type].push(key);\n    });\n  }\n\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length);\n    populateParserHintObject(self.nargs, false, 'narg', key, value);\n    return self;\n  };\n\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintObject(self.choices, true, 'choices', key, value);\n    return self;\n  };\n\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintObject(self.alias, true, 'alias', key, value);\n    return self;\n  }; // TODO: actually deprecate self.defaults.\n\n\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n    if (defaultDescription) options.defaultDescription[key] = defaultDescription;\n\n    if (typeof value === 'function') {\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value);\n      value = value.call();\n    }\n\n    populateParserHintObject(self.default, false, 'default', key, value);\n    return self;\n  };\n\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length);\n    populateParserHintObject(self.describe, false, 'key', key, true);\n    usage.describe(key, desc);\n    return self;\n  };\n\n  self.demandOption = function (keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n    populateParserHintObject(self.demandOption, false, 'demandedOptions', keys, msg);\n    return self;\n  };\n\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length);\n    populateParserHintObject(self.coerce, false, 'coerce', keys, value);\n    return self;\n  };\n\n  function populateParserHintObject(builder, isArray, type, key, value) {\n    if (Array.isArray(key)) {\n      const temp = Object.create(null); // an array of keys with one value ['x', 'y', 'z'], function parse () {}\n\n      key.forEach(k => {\n        temp[k] = value;\n      });\n      builder(temp);\n    } else if (typeof key === 'object') {\n      // an object of key value pairs: {'x': parse () {}, 'y': parse() {}}\n      Object.keys(key).forEach(k => {\n        builder(k, key[k]);\n      });\n    } else {\n      key = sanitizeKey(key); // a single key value pair 'x', parse() {}\n\n      if (isArray) {\n        options[type][key] = (options[type][key] || []).concat(value);\n      } else {\n        options[type][key] = value;\n      }\n    }\n  } // TODO(bcoe): in future major versions move more objects towards\n  // Object.create(null):\n\n\n  function sanitizeKey(key) {\n    if (key === '__proto__') return '___proto___';\n    return key;\n  }\n\n  function deleteFromParserHintObject(optionKey) {\n    // delete from all parsing hints:\n    // boolean, array, key, alias, etc.\n    Object.keys(options).forEach(hintKey => {\n      const hint = options[hintKey];\n\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1);\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey];\n      }\n    }); // now delete the description from usage.js.\n\n    delete usage.getDescriptions()[optionKey];\n  }\n\n  self.config = function config(key, msg, parseFn) {\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length); // allow a config object to be provided directly.\n\n    if (typeof key === 'object') {\n      key = applyExtends(key, cwd);\n      options.configObjects = (options.configObjects || []).concat(key);\n      return self;\n    } // allow for a custom parsing function.\n\n\n    if (typeof msg === 'function') {\n      parseFn = msg;\n      msg = null;\n    }\n\n    key = key || 'config';\n    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'));\n    (Array.isArray(key) ? key : [key]).forEach(k => {\n      options.config[k] = parseFn || true;\n    });\n    return self;\n  };\n\n  self.example = function (cmd, description) {\n    argsert('<string> [string]', [cmd, description], arguments.length);\n    usage.example(cmd, description);\n    return self;\n  };\n\n  self.command = function (cmd, description, builder, handler, middlewares) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array]', [cmd, description, builder, handler, middlewares], arguments.length);\n    command.addHandler(cmd, description, builder, handler, middlewares);\n    return self;\n  };\n\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length);\n    const req = parentRequire || require;\n    command.addDirectory(dir, self.getContext(), req, require('get-caller-file')(), opts);\n    return self;\n  }; // TODO: deprecate self.demand in favor of\n  // .demandCommand() .demandOption().\n\n\n  self.demand = self.required = self.require = function demand(keys, max, msg) {\n    // you can optionally provide a 'max' key,\n    // which will raise an exception if too many '_'\n    // options are provided.\n    if (Array.isArray(max)) {\n      max.forEach(key => {\n        self.demandOption(key, msg);\n      });\n      max = Infinity;\n    } else if (typeof max !== 'number') {\n      msg = max;\n      max = Infinity;\n    }\n\n    if (typeof keys === 'number') {\n      self.demandCommand(keys, max, msg, msg);\n    } else if (Array.isArray(keys)) {\n      keys.forEach(key => {\n        self.demandOption(key, msg);\n      });\n    } else {\n      if (typeof msg === 'string') {\n        self.demandOption(keys, msg);\n      } else if (msg === true || typeof msg === 'undefined') {\n        self.demandOption(keys);\n      }\n    }\n\n    return self;\n  };\n\n  self.demandCommand = function demandCommand(min, max, minMsg, maxMsg) {\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n    if (typeof min === 'undefined') min = 1;\n\n    if (typeof max !== 'number') {\n      minMsg = max;\n      max = Infinity;\n    }\n\n    self.global('_', false);\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    };\n    return self;\n  };\n\n  self.getDemandedOptions = () => {\n    argsert([], 0);\n    return options.demandedOptions;\n  };\n\n  self.getDemandedCommands = () => {\n    argsert([], 0);\n    return options.demandedCommands;\n  };\n\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n    validation.implies(key, value);\n    return self;\n  };\n\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n    validation.conflicts(key1, key2);\n    return self;\n  };\n\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n\n    if (description !== undefined) {\n      // .usage() can be used as an alias for defining\n      // a default command.\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler);\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n      }\n    } else {\n      usage.usage(msg);\n      return self;\n    }\n  };\n\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length);\n    usage.epilog(msg);\n    return self;\n  };\n\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length);\n    usage.failFn(f);\n    return self;\n  };\n\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length);\n    validation.check(f, _global !== false);\n    return self;\n  };\n\n  self.global = function global(globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length);\n    globals = [].concat(globals);\n\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1);\n    } else {\n      globals.forEach(g => {\n        if (options.local.indexOf(g) === -1) options.local.push(g);\n      });\n    }\n\n    return self;\n  };\n\n  self.pkgConf = function pkgConf(key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length);\n    let conf = null; // prefer cwd to require-main-filename in this method\n    // since we're looking for e.g. \"nyc\" config in nyc consumer\n    // rather than \"yargs\" config in nyc (where nyc is the main filename)\n\n    const obj = pkgUp(rootPath || cwd); // If an object exists in the key, add it to options.configObjects\n\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd);\n      options.configObjects = (options.configObjects || []).concat(conf);\n    }\n\n    return self;\n  };\n\n  const pkgs = {};\n\n  function pkgUp(rootPath) {\n    const npath = rootPath || '*';\n    if (pkgs[npath]) return pkgs[npath];\n\n    const findUp = require('find-up');\n\n    let obj = {};\n\n    try {\n      let startDir = rootPath || require('require-main-filename')(parentRequire || require); // When called in an environment that lacks require.main.filename, such as a jest test runner,\n      // startDir is already process.cwd(), and should not be shortened.\n      // Whether or not it is _actually_ a directory (e.g., extensionless bin) is irrelevant, find-up handles it.\n\n\n      if (!rootPath && path.extname(startDir)) {\n        startDir = path.dirname(startDir);\n      }\n\n      const pkgJsonPath = findUp.sync('package.json', {\n        cwd: startDir\n      });\n      obj = JSON.parse(fs.readFileSync(pkgJsonPath));\n    } catch (noop) {}\n\n    pkgs[npath] = obj || {};\n    return pkgs[npath];\n  }\n\n  let parseFn = null;\n  let parseContext = null;\n\n  self.parse = function parse(args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n\n    if (typeof args === 'undefined') {\n      return self._parseArgs(processArgs);\n    } // a context object can optionally be provided, this allows\n    // additional information to be passed to a command handler.\n\n\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit;\n      shortCircuit = _parseFn;\n    } // by providing a function as a second argument to\n    // parse you can capture output that would otherwise\n    // default to printing to stdout/stderr.\n\n\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit;\n      shortCircuit = null;\n    } // completion short-circuits the parsing process,\n    // skipping validation, etc.\n\n\n    if (!shortCircuit) processArgs = args;\n    freeze();\n    if (parseFn) exitProcess = false;\n\n    const parsed = self._parseArgs(args, shortCircuit);\n\n    if (parseFn) parseFn(exitError, parsed, output);\n    unfreeze();\n    return parsed;\n  };\n\n  self._getParseContext = () => parseContext || {};\n\n  self._hasParseCallback = () => !!parseFn;\n\n  self.option = self.options = function option(key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length);\n\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.options(k, key[k]);\n      });\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {};\n      }\n\n      options.key[key] = true; // track manually set keys.\n\n      if (opt.alias) self.alias(key, opt.alias);\n      const demand = opt.demand || opt.required || opt.require; // deprecated, use 'demandOption' instead\n\n      if (demand) {\n        self.demand(key, demand);\n      }\n\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n      }\n\n      if ('conflicts' in opt) {\n        self.conflicts(key, opt.conflicts);\n      }\n\n      if ('default' in opt) {\n        self.default(key, opt.default);\n      }\n\n      if ('implies' in opt) {\n        self.implies(key, opt.implies);\n      }\n\n      if ('nargs' in opt) {\n        self.nargs(key, opt.nargs);\n      }\n\n      if (opt.config) {\n        self.config(key, opt.configParser);\n      }\n\n      if (opt.normalize) {\n        self.normalize(key);\n      }\n\n      if ('choices' in opt) {\n        self.choices(key, opt.choices);\n      }\n\n      if ('coerce' in opt) {\n        self.coerce(key, opt.coerce);\n      }\n\n      if ('group' in opt) {\n        self.group(key, opt.group);\n      }\n\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key);\n        if (opt.alias) self.boolean(opt.alias);\n      }\n\n      if (opt.array || opt.type === 'array') {\n        self.array(key);\n        if (opt.alias) self.array(opt.alias);\n      }\n\n      if (opt.number || opt.type === 'number') {\n        self.number(key);\n        if (opt.alias) self.number(opt.alias);\n      }\n\n      if (opt.string || opt.type === 'string') {\n        self.string(key);\n        if (opt.alias) self.string(opt.alias);\n      }\n\n      if (opt.count || opt.type === 'count') {\n        self.count(key);\n      }\n\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global);\n      }\n\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription;\n      }\n\n      if (opt.skipValidation) {\n        self.skipValidation(key);\n      }\n\n      const desc = opt.describe || opt.description || opt.desc;\n      self.describe(key, desc);\n\n      if (opt.hidden) {\n        self.hide(key);\n      }\n\n      if (opt.requiresArg) {\n        self.requiresArg(key);\n      }\n    }\n\n    return self;\n  };\n\n  self.getOptions = () => options;\n\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length);\n\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\");\n    } // .positional() only supports a subset of the configuration\n    // options available to .option().\n\n\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize', 'choices', 'conflicts', 'coerce', 'type', 'describe', 'desc', 'description', 'alias'];\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1; // type can be one of string|number|boolean.\n\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false;\n      return accept;\n    }); // copy over any settings that can be inferred from the command string.\n\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n    const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    };\n    Object.keys(parseOptions).forEach(pk => {\n      if (Array.isArray(parseOptions[pk])) {\n        if (parseOptions[pk].indexOf(key) !== -1) opts[pk] = true;\n      } else {\n        if (parseOptions[pk][key] && !(pk in opts)) opts[pk] = parseOptions[pk][key];\n      }\n    });\n    self.group(key, usage.getPositionalGroupName());\n    return self.option(key, opts);\n  };\n\n  self.group = function group(opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length);\n    const existing = preservedGroups[groupName] || groups[groupName];\n\n    if (preservedGroups[groupName]) {\n      // we now only need to track this group name in groups.\n      delete preservedGroups[groupName];\n    }\n\n    const seen = {};\n    groups[groupName] = (existing || []).concat(opts).filter(key => {\n      if (seen[key]) return false;\n      return seen[key] = true;\n    });\n    return self;\n  }; // combine explicit and preserved groups. explicit groups should be first\n\n\n  self.getGroups = () => Object.assign({}, groups, preservedGroups); // as long as options.envPrefix is not undefined,\n  // parser will apply env vars matching prefix to argv\n\n\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length);\n    if (prefix === false) options.envPrefix = undefined;else options.envPrefix = prefix || '';\n    return self;\n  };\n\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length);\n    usage.wrap(cols);\n    return self;\n  };\n\n  let strict = false;\n\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strict = enabled !== false;\n    return self;\n  };\n\n  self.getStrict = () => strict;\n\n  let parserConfig = {};\n\n  self.parserConfiguration = function parserConfiguration(config) {\n    argsert('<object>', [config], arguments.length);\n    parserConfig = config;\n    return self;\n  };\n\n  self.getParserConfiguration = () => parserConfig;\n\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length);\n    if (!self.parsed) self._parseArgs(processArgs); // run parser, if it has not already been executed.\n\n    if (command.hasDefaultCommand()) {\n      context.resets++; // override the restriction on top-level positoinals.\n\n      command.runDefaultBuilderOn(self, true);\n    }\n\n    usage.showHelp(level);\n    return self;\n  };\n\n  let versionOpt = null;\n\n  self.version = function version(opt, msg, ver) {\n    const defaultVersionOpt = 'version';\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length); // nuke the key previously configured\n    // to return version #.\n\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt);\n      usage.version(undefined);\n      versionOpt = null;\n    }\n\n    if (arguments.length === 0) {\n      ver = guessVersion();\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 1) {\n      if (opt === false) {\n        // disable default 'version' key.\n        return self;\n      }\n\n      ver = opt;\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 2) {\n      ver = msg;\n      msg = null;\n    }\n\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n    msg = msg || usage.deferY18nLookup('Show version number');\n    usage.version(ver || undefined);\n    self.boolean(versionOpt);\n    self.describe(versionOpt, msg);\n    return self;\n  };\n\n  function guessVersion() {\n    const obj = pkgUp();\n    return obj.version || 'unknown';\n  }\n\n  let helpOpt = null;\n\n  self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n    const defaultHelpOpt = 'help';\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length); // nuke the key previously configured\n    // to return help.\n\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt);\n      helpOpt = null;\n    }\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    } // use arguments, fallback to defaults for opt and msg\n\n\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n    self.boolean(helpOpt);\n    self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'));\n    return self;\n  };\n\n  const defaultShowHiddenOpt = 'show-hidden';\n  options.showHiddenOpt = defaultShowHiddenOpt;\n\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n    self.boolean(showHiddenOpt);\n    self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'));\n    options.showHiddenOpt = showHiddenOpt;\n    return self;\n  };\n\n  self.hide = function hide(key) {\n    argsert('<string|object>', [key], arguments.length);\n    options.hiddenOptions.push(key);\n    return self;\n  };\n\n  self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n    usage.showHelpOnFail(enabled, message);\n    return self;\n  };\n\n  var exitProcess = true;\n\n  self.exitProcess = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n\n    if (typeof enabled !== 'boolean') {\n      enabled = true;\n    }\n\n    exitProcess = enabled;\n    return self;\n  };\n\n  self.getExitProcess = () => exitProcess;\n\n  var completionCommand = null;\n\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length); // a function to execute when generating\n    // completions can be provided as the second\n    // or third argument to completion.\n\n    if (typeof desc === 'function') {\n      fn = desc;\n      desc = null;\n    } // register the completion command.\n\n\n    completionCommand = cmd || 'completion';\n\n    if (!desc && desc !== false) {\n      desc = 'generate completion script';\n    }\n\n    self.command(completionCommand, desc); // a function can be provided\n\n    if (fn) completion.registerFunction(fn);\n    return self;\n  };\n\n  self.showCompletionScript = function ($0) {\n    argsert('[string]', [$0], arguments.length);\n    $0 = $0 || self.$0;\n\n    _logger.log(completion.generateCompletionScript($0, completionCommand));\n\n    return self;\n  };\n\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length);\n    completion.getCompletion(args, done);\n  };\n\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length);\n\n    if (arguments.length === 0) {\n      guessLocale();\n      return y18n.getLocale();\n    }\n\n    detectLocale = false;\n    y18n.setLocale(locale);\n    return self;\n  };\n\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length);\n    detectLocale = false;\n    y18n.updateLocale(obj);\n    return self;\n  };\n\n  let detectLocale = true;\n\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length);\n    detectLocale = detect;\n    return self;\n  };\n\n  self.getDetectLocale = () => detectLocale;\n\n  var hasOutput = false;\n  var exitError = null; // maybe exit, always capture\n  // context about why we wanted to exit.\n\n  self.exit = (code, err) => {\n    hasOutput = true;\n    exitError = err;\n    if (exitProcess) process.exit(code);\n  }; // we use a custom logger that buffers output,\n  // so that we can print to non-CLIs, e.g., chat-bots.\n\n\n  const _logger = {\n    log() {\n      const args = [];\n\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i]);\n\n      if (!self._hasParseCallback()) console.log.apply(console, args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    },\n\n    error() {\n      const args = [];\n\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i]);\n\n      if (!self._hasParseCallback()) console.error.apply(console, args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    }\n\n  };\n\n  self._getLoggerInstance = () => _logger; // has yargs output an error our help\n  // message in the current execution context.\n\n\n  self._hasOutput = () => hasOutput;\n\n  self._setHasOutput = () => {\n    hasOutput = true;\n  };\n\n  let recommendCommands;\n\n  self.recommendCommands = function (recommend) {\n    argsert('[boolean]', [recommend], arguments.length);\n    recommendCommands = typeof recommend === 'boolean' ? recommend : true;\n    return self;\n  };\n\n  self.getUsageInstance = () => usage;\n\n  self.getValidationInstance = () => validation;\n\n  self.getCommandInstance = () => command;\n\n  self.terminalWidth = () => {\n    argsert([], 0);\n    return typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null;\n  };\n\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  });\n\n  self._parseArgs = function parseArgs(args, shortCircuit, _skipValidation, commandIndex) {\n    let skipValidation = !!_skipValidation;\n    args = args || processArgs;\n    options.__ = y18n.__;\n    options.configuration = self.getParserConfiguration(); // Deprecated\n\n    let pkgConfig = pkgUp()['yargs'];\n\n    if (pkgConfig) {\n      console.warn('Configuring yargs through package.json is deprecated and will be removed in the next major release, please use the JS API instead.');\n      options.configuration = Object.assign({}, pkgConfig, options.configuration);\n    }\n\n    const parsed = Parser.detailed(args, options);\n    let argv = parsed.argv;\n    if (parseContext) argv = Object.assign({}, argv, parseContext);\n    const aliases = parsed.aliases;\n    argv.$0 = self.$0;\n    self.parsed = parsed;\n\n    try {\n      guessLocale(); // guess locale lazily, so that it can be turned off in chain.\n      // while building up the argv object, there\n      // are two passes through the parser. If completion\n      // is being performed short-circuit on the first pass.\n\n      if (shortCircuit) {\n        return argv;\n      } // if there's a handler associated with a\n      // command defer processing to it.\n\n\n      if (helpOpt) {\n        // consider any multi-char helpOpt alias as a valid help command\n        // unless all helpOpt aliases are single-char\n        // note that parsed.aliases is a normalized bidirectional map :)\n        const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter(k => k.length > 1); // check if help should trigger and strip it from _.\n\n        if (~helpCmds.indexOf(argv._[argv._.length - 1])) {\n          argv._.pop();\n\n          argv[helpOpt] = true;\n        }\n      }\n\n      const handlerKeys = command.getCommands();\n      const requestCompletions = (completion.completionKey in argv);\n      const skipRecommendation = argv[helpOpt] || requestCompletions;\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand;\n\n          for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i]);\n\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              // commands are executed using a recursive algorithm that executes\n              // the deepest command first; we keep track of the position in the\n              // argv._ array that is currently being executed.\n              return command.runCommand(cmd, self, parsed, i + 1);\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd;\n              break;\n            }\n          } // run the default command, if defined\n\n\n          if (command.hasDefaultCommand() && !skipDefaultCommand) {\n            return command.runCommand(null, self, parsed);\n          } // recommend a command if recommendCommands() has\n          // been enabled, and no commands were found to execute\n\n\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation.recommendCommands(firstUnknownCommand, handlerKeys);\n          }\n        } // generate a completion script for adding to ~/.bashrc.\n\n\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true);\n          self.showCompletionScript();\n          self.exit(0);\n        }\n      } else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n        return command.runCommand(null, self, parsed);\n      } // we must run completions first, a user might\n      // want to complete the --help or --version option.\n\n\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true); // we allow for asynchronous completions,\n        // e.g., loading in a list of commands from an API.\n\n        const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);\n        completion.getCompletion(completionArgs, completions => {\n          ;\n          (completions || []).forEach(completion => {\n            _logger.log(completion);\n          });\n          self.exit(0);\n        });\n        return argv;\n      } // Handle 'help' and 'version' options\n      // if we haven't already output help!\n\n\n      if (!hasOutput) {\n        Object.keys(argv).forEach(key => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            self.showHelp('log');\n            self.exit(0);\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            usage.showVersion();\n            self.exit(0);\n          }\n        });\n      } // Check if any of the options to skip validation were provided\n\n\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n      } // If the help or version options where used and exitProcess is false,\n      // or if explicitly skipped, we won't run validations.\n\n\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message); // if we're executed via bash completion, don't\n        // bother with validation.\n\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error);\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage.fail(err.message, err);else throw err;\n    }\n\n    return argv;\n  };\n\n  self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors) {\n    if (parseErrors) throw new YError(parseErrors.message || parseErrors);\n    validation.nonOptionCount(argv);\n    validation.requiredArguments(argv);\n    if (strict) validation.unknownArguments(argv, aliases, positionalMap);\n    validation.customChecks(argv, aliases);\n    validation.limitedChoices(argv);\n    validation.implications(argv);\n    validation.conflicting(argv);\n  };\n\n  function guessLocale() {\n    if (!detectLocale) return;\n\n    try {\n      const {\n        env\n      } = process;\n      const locale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE || 'en_US';\n      self.locale(locale.replace(/[.:].*/, ''));\n    } catch (err) {// if we explode looking up locale just noop\n      // we'll keep using the default language 'en'.\n    }\n  } // an app should almost always have --version and --help,\n  // if you *really* want to disable this use .help(false)/.version(false).\n\n\n  self.help();\n  self.version();\n  return self;\n} // rebase an absolute path to a relative one with respect to a base directory\n// exported for tests\n\n\nexports.rebase = rebase;\n\nfunction rebase(base, dir) {\n  return path.relative(base, dir);\n}","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/node_modules/yargs/yargs.js"],"names":["argsert","require","fs","Command","Completion","Parser","path","Usage","Validation","Y18n","objFilter","setBlocking","applyExtends","globalMiddlewareFactory","YError","exports","module","Yargs","processArgs","cwd","parentRequire","self","command","completion","groups","globalMiddleware","output","preservedGroups","usage","validation","y18n","directory","resolve","__dirname","updateFiles","middleware","process","scriptName","$0","test","argv","slice","map","x","i","b","rebase","match","length","join","trim","env","_","undefined","replace","dirname","execPath","context","resets","commands","fullCommands","files","getContext","options","resetOptions","reset","aliases","tmpOptions","local","configObjects","localLookup","forEach","l","a","Object","keys","reduce","acc","groupName","filter","key","arrayOptions","objectOptions","k","v","envPrefix","completionCommand","exitError","hasOutput","parsed","frozen","freeze","exitProcess","strict","unfreeze","parseFn","parseContext","boolean","arguments","populateParserHintArray","array","number","normalize","count","string","requiresArg","populateParserHintObject","nargs","skipValidation","type","value","concat","sanitizeKey","push","choices","alias","default","defaults","defaultDescription","functionDescription","call","describe","desc","demandOption","msg","coerce","builder","isArray","Array","temp","create","deleteFromParserHintObject","optionKey","hintKey","hint","indexOf","splice","getDescriptions","config","deferY18nLookup","example","cmd","description","handler","middlewares","addHandler","commandDir","dir","opts","req","addDirectory","demand","required","max","Infinity","demandCommand","min","minMsg","maxMsg","global","demandedCommands","getDemandedOptions","demandedOptions","getDemandedCommands","implies","conflicts","key1","key2","epilogue","epilog","fail","f","failFn","check","_global","globals","g","pkgConf","rootPath","conf","obj","pkgUp","pkgs","npath","findUp","startDir","extname","pkgJsonPath","sync","JSON","parse","readFileSync","noop","args","shortCircuit","_parseFn","_parseArgs","_getParseContext","_hasParseCallback","option","opt","configParser","group","hidden","hide","getOptions","positional","supportedOpts","accept","fullCommand","parseOptions","cmdToParseOptions","pk","getPositionalGroupName","existing","seen","getGroups","assign","prefix","wrap","cols","enabled","getStrict","parserConfig","parserConfiguration","getParserConfiguration","showHelp","level","hasDefaultCommand","runDefaultBuilderOn","versionOpt","version","ver","defaultVersionOpt","guessVersion","helpOpt","addHelpOpt","help","defaultHelpOpt","defaultShowHiddenOpt","showHiddenOpt","addShowHiddenOpt","showHidden","hiddenOptions","showHelpOnFail","message","getExitProcess","fn","registerFunction","showCompletionScript","_logger","log","generateCompletionScript","getCompletion","done","locale","guessLocale","getLocale","detectLocale","setLocale","updateStrings","updateLocale","detect","getDetectLocale","exit","code","err","console","apply","error","_getLoggerInstance","_hasOutput","_setHasOutput","recommendCommands","recommend","getUsageInstance","getValidationInstance","getCommandInstance","terminalWidth","stdout","columns","defineProperty","get","enumerable","parseArgs","_skipValidation","commandIndex","__","configuration","pkgConfig","warn","detailed","helpCmds","pop","handlerKeys","getCommands","requestCompletions","completionKey","skipRecommendation","skipDefaultCommand","firstUnknownCommand","String","runCommand","completionArgs","completions","showVersion","some","_runValidation","runValidation","positionalMap","parseErrors","nonOptionCount","requiredArguments","unknownArguments","customChecks","limitedChoices","implications","conflicting","LC_ALL","LC_MESSAGES","LANG","LANGUAGE","base","relative"],"mappings":"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","sourcesContent":["'use strict'\nconst argsert = require('./lib/argsert')\nconst fs = require('fs')\nconst Command = require('./lib/command')\nconst Completion = require('./lib/completion')\nconst Parser = require('yargs-parser')\nconst path = require('path')\nconst Usage = require('./lib/usage')\nconst Validation = require('./lib/validation')\nconst Y18n = require('y18n')\nconst objFilter = require('./lib/obj-filter')\nconst setBlocking = require('set-blocking')\nconst applyExtends = require('./lib/apply-extends')\nconst { globalMiddlewareFactory } = require('./lib/middleware')\nconst YError = require('./lib/yerror')\n\nexports = module.exports = Yargs\nfunction Yargs (processArgs, cwd, parentRequire) {\n  processArgs = processArgs || [] // handle calling yargs().\n\n  const self = {}\n  let command = null\n  let completion = null\n  let groups = {}\n  let globalMiddleware = []\n  let output = ''\n  let preservedGroups = {}\n  let usage = null\n  let validation = null\n\n  const y18n = Y18n({\n    directory: path.resolve(__dirname, './locales'),\n    updateFiles: false\n  })\n\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self)\n\n  if (!cwd) cwd = process.cwd()\n\n  self.scriptName = function scriptName (scriptName) {\n    self.$0 = scriptName\n    return self\n  }\n\n  // ignore the node bin, specify this in your\n  // bin file with #!/usr/bin/env node\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(process.argv[0])) {\n    self.$0 = process.argv.slice(1, 2)\n  } else {\n    self.$0 = process.argv.slice(0, 1)\n  }\n\n  self.$0 = self.$0\n    .map((x, i) => {\n      const b = rebase(cwd, x)\n      return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x\n    })\n    .join(' ').trim()\n\n  if (process.env._ !== undefined && process.argv[1] === process.env._) {\n    self.$0 = process.env._.replace(\n      `${path.dirname(process.execPath)}/`, ''\n    )\n  }\n\n  // use context object to keep track of resets, subcommand execution, etc\n  // submodules should modify and check the state of context as necessary\n  const context = { resets: -1, commands: [], fullCommands: [], files: [] }\n  self.getContext = () => context\n\n  // puts yargs back into an initial state. any keys\n  // that have been set to \"global\" will not be reset\n  // by this action.\n  let options\n  self.resetOptions = self.reset = function resetOptions (aliases) {\n    context.resets++\n    aliases = aliases || {}\n    options = options || {}\n    // put yargs back into an initial state, this\n    // logic is used to build a nested command\n    // hierarchy.\n    const tmpOptions = {}\n    tmpOptions.local = options.local ? options.local : []\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : []\n\n    // if a key has been explicitly set as local,\n    // we should reset it before passing options to command.\n    const localLookup = {}\n    tmpOptions.local.forEach((l) => {\n      localLookup[l] = true\n      ;(aliases[l] || []).forEach((a) => {\n        localLookup[a] = true\n      })\n    })\n\n    // preserve all groups not set to local.\n    preservedGroups = Object.keys(groups).reduce((acc, groupName) => {\n      const keys = groups[groupName].filter(key => !(key in localLookup))\n      if (keys.length > 0) {\n        acc[groupName] = keys\n      }\n      return acc\n    }, {})\n    // groups can now be reset\n    groups = {}\n\n    const arrayOptions = [\n      'array', 'boolean', 'string', 'skipValidation',\n      'count', 'normalize', 'number',\n      'hiddenOptions'\n    ]\n\n    const objectOptions = [\n      'narg', 'key', 'alias', 'default', 'defaultDescription',\n      'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce'\n    ]\n\n    arrayOptions.forEach((k) => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k])\n    })\n\n    objectOptions.forEach((k) => {\n      tmpOptions[k] = objFilter(options[k], (k, v) => !localLookup[k])\n    })\n\n    tmpOptions.envPrefix = options.envPrefix\n    options = tmpOptions\n\n    // if this is the first time being executed, create\n    // instances of all our helpers -- otherwise just reset.\n    usage = usage ? usage.reset(localLookup) : Usage(self, y18n)\n    validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n)\n    command = command ? command.reset() : Command(self, usage, validation, globalMiddleware)\n    if (!completion) completion = Completion(self, usage, command)\n\n    completionCommand = null\n    output = ''\n    exitError = null\n    hasOutput = false\n    self.parsed = false\n\n    return self\n  }\n  self.resetOptions()\n\n  // temporary hack: allow \"freezing\" of reset-able state for parse(msg, cb)\n  let frozen\n  function freeze () {\n    frozen = {}\n    frozen.options = options\n    frozen.configObjects = options.configObjects.slice(0)\n    frozen.exitProcess = exitProcess\n    frozen.groups = groups\n    usage.freeze()\n    validation.freeze()\n    command.freeze()\n    frozen.strict = strict\n    frozen.completionCommand = completionCommand\n    frozen.output = output\n    frozen.exitError = exitError\n    frozen.hasOutput = hasOutput\n    frozen.parsed = self.parsed\n  }\n  function unfreeze () {\n    options = frozen.options\n    options.configObjects = frozen.configObjects\n    exitProcess = frozen.exitProcess\n    groups = frozen.groups\n    output = frozen.output\n    exitError = frozen.exitError\n    hasOutput = frozen.hasOutput\n    self.parsed = frozen.parsed\n    usage.unfreeze()\n    validation.unfreeze()\n    command.unfreeze()\n    strict = frozen.strict\n    completionCommand = frozen.completionCommand\n    parseFn = null\n    parseContext = null\n    frozen = undefined\n  }\n\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('boolean', keys)\n    return self\n  }\n\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('array', keys)\n    return self\n  }\n\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('number', keys)\n    return self\n  }\n\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('normalize', keys)\n    return self\n  }\n\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('count', keys)\n    return self\n  }\n\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('string', keys)\n    return self\n  }\n\n  self.requiresArg = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintObject(self.nargs, false, 'narg', keys, 1)\n    return self\n  }\n\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length)\n    populateParserHintArray('skipValidation', keys)\n    return self\n  }\n\n  function populateParserHintArray (type, keys, value) {\n    keys = [].concat(keys)\n    keys.forEach((key) => {\n      key = sanitizeKey(key)\n      options[type].push(key)\n    })\n  }\n\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length)\n    populateParserHintObject(self.nargs, false, 'narg', key, value)\n    return self\n  }\n\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length)\n    populateParserHintObject(self.choices, true, 'choices', key, value)\n    return self\n  }\n\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length)\n    populateParserHintObject(self.alias, true, 'alias', key, value)\n    return self\n  }\n\n  // TODO: actually deprecate self.defaults.\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length)\n    if (defaultDescription) options.defaultDescription[key] = defaultDescription\n    if (typeof value === 'function') {\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value)\n      value = value.call()\n    }\n    populateParserHintObject(self.default, false, 'default', key, value)\n    return self\n  }\n\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length)\n    populateParserHintObject(self.describe, false, 'key', key, true)\n    usage.describe(key, desc)\n    return self\n  }\n\n  self.demandOption = function (keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length)\n    populateParserHintObject(self.demandOption, false, 'demandedOptions', keys, msg)\n    return self\n  }\n\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length)\n    populateParserHintObject(self.coerce, false, 'coerce', keys, value)\n    return self\n  }\n\n  function populateParserHintObject (builder, isArray, type, key, value) {\n    if (Array.isArray(key)) {\n      const temp = Object.create(null)\n      // an array of keys with one value ['x', 'y', 'z'], function parse () {}\n      key.forEach((k) => {\n        temp[k] = value\n      })\n      builder(temp)\n    } else if (typeof key === 'object') {\n      // an object of key value pairs: {'x': parse () {}, 'y': parse() {}}\n      Object.keys(key).forEach((k) => {\n        builder(k, key[k])\n      })\n    } else {\n      key = sanitizeKey(key)\n      // a single key value pair 'x', parse() {}\n      if (isArray) {\n        options[type][key] = (options[type][key] || []).concat(value)\n      } else {\n        options[type][key] = value\n      }\n    }\n  }\n\n  // TODO(bcoe): in future major versions move more objects towards\n  // Object.create(null):\n  function sanitizeKey (key) {\n    if (key === '__proto__') return '___proto___'\n    return key\n  }\n\n  function deleteFromParserHintObject (optionKey) {\n    // delete from all parsing hints:\n    // boolean, array, key, alias, etc.\n    Object.keys(options).forEach((hintKey) => {\n      const hint = options[hintKey]\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1)\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey]\n      }\n    })\n    // now delete the description from usage.js.\n    delete usage.getDescriptions()[optionKey]\n  }\n\n  self.config = function config (key, msg, parseFn) {\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length)\n    // allow a config object to be provided directly.\n    if (typeof key === 'object') {\n      key = applyExtends(key, cwd)\n      options.configObjects = (options.configObjects || []).concat(key)\n      return self\n    }\n\n    // allow for a custom parsing function.\n    if (typeof msg === 'function') {\n      parseFn = msg\n      msg = null\n    }\n\n    key = key || 'config'\n    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'))\n    ;(Array.isArray(key) ? key : [key]).forEach((k) => {\n      options.config[k] = parseFn || true\n    })\n\n    return self\n  }\n\n  self.example = function (cmd, description) {\n    argsert('<string> [string]', [cmd, description], arguments.length)\n    usage.example(cmd, description)\n    return self\n  }\n\n  self.command = function (cmd, description, builder, handler, middlewares) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array]', [cmd, description, builder, handler, middlewares], arguments.length)\n    command.addHandler(cmd, description, builder, handler, middlewares)\n    return self\n  }\n\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length)\n    const req = parentRequire || require\n    command.addDirectory(dir, self.getContext(), req, require('get-caller-file')(), opts)\n    return self\n  }\n\n  // TODO: deprecate self.demand in favor of\n  // .demandCommand() .demandOption().\n  self.demand = self.required = self.require = function demand (keys, max, msg) {\n    // you can optionally provide a 'max' key,\n    // which will raise an exception if too many '_'\n    // options are provided.\n    if (Array.isArray(max)) {\n      max.forEach((key) => {\n        self.demandOption(key, msg)\n      })\n      max = Infinity\n    } else if (typeof max !== 'number') {\n      msg = max\n      max = Infinity\n    }\n\n    if (typeof keys === 'number') {\n      self.demandCommand(keys, max, msg, msg)\n    } else if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        self.demandOption(key, msg)\n      })\n    } else {\n      if (typeof msg === 'string') {\n        self.demandOption(keys, msg)\n      } else if (msg === true || typeof msg === 'undefined') {\n        self.demandOption(keys)\n      }\n    }\n\n    return self\n  }\n\n  self.demandCommand = function demandCommand (min, max, minMsg, maxMsg) {\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length)\n\n    if (typeof min === 'undefined') min = 1\n\n    if (typeof max !== 'number') {\n      minMsg = max\n      max = Infinity\n    }\n\n    self.global('_', false)\n\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    }\n\n    return self\n  }\n\n  self.getDemandedOptions = () => {\n    argsert([], 0)\n    return options.demandedOptions\n  }\n\n  self.getDemandedCommands = () => {\n    argsert([], 0)\n    return options.demandedCommands\n  }\n\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length)\n    validation.implies(key, value)\n    return self\n  }\n\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length)\n    validation.conflicts(key1, key2)\n    return self\n  }\n\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length)\n\n    if (description !== undefined) {\n      // .usage() can be used as an alias for defining\n      // a default command.\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler)\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()')\n      }\n    } else {\n      usage.usage(msg)\n      return self\n    }\n  }\n\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length)\n    usage.epilog(msg)\n    return self\n  }\n\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length)\n    usage.failFn(f)\n    return self\n  }\n\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length)\n    validation.check(f, _global !== false)\n    return self\n  }\n\n  self.global = function global (globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length)\n    globals = [].concat(globals)\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1)\n    } else {\n      globals.forEach((g) => {\n        if (options.local.indexOf(g) === -1) options.local.push(g)\n      })\n    }\n    return self\n  }\n\n  self.pkgConf = function pkgConf (key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length)\n    let conf = null\n    // prefer cwd to require-main-filename in this method\n    // since we're looking for e.g. \"nyc\" config in nyc consumer\n    // rather than \"yargs\" config in nyc (where nyc is the main filename)\n    const obj = pkgUp(rootPath || cwd)\n\n    // If an object exists in the key, add it to options.configObjects\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd)\n      options.configObjects = (options.configObjects || []).concat(conf)\n    }\n\n    return self\n  }\n\n  const pkgs = {}\n  function pkgUp (rootPath) {\n    const npath = rootPath || '*'\n    if (pkgs[npath]) return pkgs[npath]\n    const findUp = require('find-up')\n\n    let obj = {}\n    try {\n      let startDir = rootPath || require('require-main-filename')(parentRequire || require)\n\n      // When called in an environment that lacks require.main.filename, such as a jest test runner,\n      // startDir is already process.cwd(), and should not be shortened.\n      // Whether or not it is _actually_ a directory (e.g., extensionless bin) is irrelevant, find-up handles it.\n      if (!rootPath && path.extname(startDir)) {\n        startDir = path.dirname(startDir)\n      }\n\n      const pkgJsonPath = findUp.sync('package.json', {\n        cwd: startDir\n      })\n      obj = JSON.parse(fs.readFileSync(pkgJsonPath))\n    } catch (noop) {}\n\n    pkgs[npath] = obj || {}\n    return pkgs[npath]\n  }\n\n  let parseFn = null\n  let parseContext = null\n  self.parse = function parse (args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length)\n    if (typeof args === 'undefined') {\n      return self._parseArgs(processArgs)\n    }\n\n    // a context object can optionally be provided, this allows\n    // additional information to be passed to a command handler.\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit\n      shortCircuit = _parseFn\n    }\n\n    // by providing a function as a second argument to\n    // parse you can capture output that would otherwise\n    // default to printing to stdout/stderr.\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit\n      shortCircuit = null\n    }\n    // completion short-circuits the parsing process,\n    // skipping validation, etc.\n    if (!shortCircuit) processArgs = args\n\n    freeze()\n    if (parseFn) exitProcess = false\n\n    const parsed = self._parseArgs(args, shortCircuit)\n    if (parseFn) parseFn(exitError, parsed, output)\n    unfreeze()\n\n    return parsed\n  }\n\n  self._getParseContext = () => parseContext || {}\n\n  self._hasParseCallback = () => !!parseFn\n\n  self.option = self.options = function option (key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length)\n    if (typeof key === 'object') {\n      Object.keys(key).forEach((k) => {\n        self.options(k, key[k])\n      })\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {}\n      }\n\n      options.key[key] = true // track manually set keys.\n\n      if (opt.alias) self.alias(key, opt.alias)\n\n      const demand = opt.demand || opt.required || opt.require\n\n      // deprecated, use 'demandOption' instead\n      if (demand) {\n        self.demand(key, demand)\n      }\n\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined)\n      }\n\n      if ('conflicts' in opt) {\n        self.conflicts(key, opt.conflicts)\n      }\n\n      if ('default' in opt) {\n        self.default(key, opt.default)\n      }\n\n      if ('implies' in opt) {\n        self.implies(key, opt.implies)\n      }\n\n      if ('nargs' in opt) {\n        self.nargs(key, opt.nargs)\n      }\n\n      if (opt.config) {\n        self.config(key, opt.configParser)\n      }\n\n      if (opt.normalize) {\n        self.normalize(key)\n      }\n\n      if ('choices' in opt) {\n        self.choices(key, opt.choices)\n      }\n\n      if ('coerce' in opt) {\n        self.coerce(key, opt.coerce)\n      }\n\n      if ('group' in opt) {\n        self.group(key, opt.group)\n      }\n\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key)\n        if (opt.alias) self.boolean(opt.alias)\n      }\n\n      if (opt.array || opt.type === 'array') {\n        self.array(key)\n        if (opt.alias) self.array(opt.alias)\n      }\n\n      if (opt.number || opt.type === 'number') {\n        self.number(key)\n        if (opt.alias) self.number(opt.alias)\n      }\n\n      if (opt.string || opt.type === 'string') {\n        self.string(key)\n        if (opt.alias) self.string(opt.alias)\n      }\n\n      if (opt.count || opt.type === 'count') {\n        self.count(key)\n      }\n\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global)\n      }\n\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription\n      }\n\n      if (opt.skipValidation) {\n        self.skipValidation(key)\n      }\n\n      const desc = opt.describe || opt.description || opt.desc\n      self.describe(key, desc)\n      if (opt.hidden) {\n        self.hide(key)\n      }\n\n      if (opt.requiresArg) {\n        self.requiresArg(key)\n      }\n    }\n\n    return self\n  }\n  self.getOptions = () => options\n\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length)\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\")\n    }\n\n    // .positional() only supports a subset of the configuration\n    // options available to .option().\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize',\n      'choices', 'conflicts', 'coerce', 'type', 'describe',\n      'desc', 'description', 'alias']\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1\n      // type can be one of string|number|boolean.\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false\n      return accept\n    })\n\n    // copy over any settings that can be inferred from the command string.\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1]\n    const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    }\n    Object.keys(parseOptions).forEach((pk) => {\n      if (Array.isArray(parseOptions[pk])) {\n        if (parseOptions[pk].indexOf(key) !== -1) opts[pk] = true\n      } else {\n        if (parseOptions[pk][key] && !(pk in opts)) opts[pk] = parseOptions[pk][key]\n      }\n    })\n    self.group(key, usage.getPositionalGroupName())\n    return self.option(key, opts)\n  }\n\n  self.group = function group (opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length)\n    const existing = preservedGroups[groupName] || groups[groupName]\n    if (preservedGroups[groupName]) {\n      // we now only need to track this group name in groups.\n      delete preservedGroups[groupName]\n    }\n\n    const seen = {}\n    groups[groupName] = (existing || []).concat(opts).filter((key) => {\n      if (seen[key]) return false\n      return (seen[key] = true)\n    })\n    return self\n  }\n  // combine explicit and preserved groups. explicit groups should be first\n  self.getGroups = () => Object.assign({}, groups, preservedGroups)\n\n  // as long as options.envPrefix is not undefined,\n  // parser will apply env vars matching prefix to argv\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length)\n    if (prefix === false) options.envPrefix = undefined\n    else options.envPrefix = prefix || ''\n    return self\n  }\n\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length)\n    usage.wrap(cols)\n    return self\n  }\n\n  let strict = false\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length)\n    strict = enabled !== false\n    return self\n  }\n  self.getStrict = () => strict\n\n  let parserConfig = {}\n  self.parserConfiguration = function parserConfiguration (config) {\n    argsert('<object>', [config], arguments.length)\n    parserConfig = config\n    return self\n  }\n  self.getParserConfiguration = () => parserConfig\n\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length)\n    if (!self.parsed) self._parseArgs(processArgs) // run parser, if it has not already been executed.\n    if (command.hasDefaultCommand()) {\n      context.resets++ // override the restriction on top-level positoinals.\n      command.runDefaultBuilderOn(self, true)\n    }\n    usage.showHelp(level)\n    return self\n  }\n\n  let versionOpt = null\n  self.version = function version (opt, msg, ver) {\n    const defaultVersionOpt = 'version'\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length)\n\n    // nuke the key previously configured\n    // to return version #.\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt)\n      usage.version(undefined)\n      versionOpt = null\n    }\n\n    if (arguments.length === 0) {\n      ver = guessVersion()\n      opt = defaultVersionOpt\n    } else if (arguments.length === 1) {\n      if (opt === false) { // disable default 'version' key.\n        return self\n      }\n      ver = opt\n      opt = defaultVersionOpt\n    } else if (arguments.length === 2) {\n      ver = msg\n      msg = null\n    }\n\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt\n    msg = msg || usage.deferY18nLookup('Show version number')\n\n    usage.version(ver || undefined)\n    self.boolean(versionOpt)\n    self.describe(versionOpt, msg)\n    return self\n  }\n\n  function guessVersion () {\n    const obj = pkgUp()\n\n    return obj.version || 'unknown'\n  }\n\n  let helpOpt = null\n  self.addHelpOpt = self.help = function addHelpOpt (opt, msg) {\n    const defaultHelpOpt = 'help'\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length)\n\n    // nuke the key previously configured\n    // to return help.\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt)\n      helpOpt = null\n    }\n\n    if (arguments.length === 1) {\n      if (opt === false) return self\n    }\n\n    // use arguments, fallback to defaults for opt and msg\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt\n    self.boolean(helpOpt)\n    self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'))\n    return self\n  }\n\n  const defaultShowHiddenOpt = 'show-hidden'\n  options.showHiddenOpt = defaultShowHiddenOpt\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt (opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length)\n\n    if (arguments.length === 1) {\n      if (opt === false) return self\n    }\n\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt\n    self.boolean(showHiddenOpt)\n    self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'))\n    options.showHiddenOpt = showHiddenOpt\n    return self\n  }\n\n  self.hide = function hide (key) {\n    argsert('<string|object>', [key], arguments.length)\n    options.hiddenOptions.push(key)\n    return self\n  }\n\n  self.showHelpOnFail = function showHelpOnFail (enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length)\n    usage.showHelpOnFail(enabled, message)\n    return self\n  }\n\n  var exitProcess = true\n  self.exitProcess = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length)\n    if (typeof enabled !== 'boolean') {\n      enabled = true\n    }\n    exitProcess = enabled\n    return self\n  }\n  self.getExitProcess = () => exitProcess\n\n  var completionCommand = null\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length)\n\n    // a function to execute when generating\n    // completions can be provided as the second\n    // or third argument to completion.\n    if (typeof desc === 'function') {\n      fn = desc\n      desc = null\n    }\n\n    // register the completion command.\n    completionCommand = cmd || 'completion'\n    if (!desc && desc !== false) {\n      desc = 'generate completion script'\n    }\n    self.command(completionCommand, desc)\n\n    // a function can be provided\n    if (fn) completion.registerFunction(fn)\n\n    return self\n  }\n\n  self.showCompletionScript = function ($0) {\n    argsert('[string]', [$0], arguments.length)\n    $0 = $0 || self.$0\n    _logger.log(completion.generateCompletionScript($0, completionCommand))\n    return self\n  }\n\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length)\n    completion.getCompletion(args, done)\n  }\n\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length)\n    if (arguments.length === 0) {\n      guessLocale()\n      return y18n.getLocale()\n    }\n    detectLocale = false\n    y18n.setLocale(locale)\n    return self\n  }\n\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length)\n    detectLocale = false\n    y18n.updateLocale(obj)\n    return self\n  }\n\n  let detectLocale = true\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length)\n    detectLocale = detect\n    return self\n  }\n  self.getDetectLocale = () => detectLocale\n\n  var hasOutput = false\n  var exitError = null\n  // maybe exit, always capture\n  // context about why we wanted to exit.\n  self.exit = (code, err) => {\n    hasOutput = true\n    exitError = err\n    if (exitProcess) process.exit(code)\n  }\n\n  // we use a custom logger that buffers output,\n  // so that we can print to non-CLIs, e.g., chat-bots.\n  const _logger = {\n    log () {\n      const args = []\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i])\n      if (!self._hasParseCallback()) console.log.apply(console, args)\n      hasOutput = true\n      if (output.length) output += '\\n'\n      output += args.join(' ')\n    },\n    error () {\n      const args = []\n      for (let i = 0; i < arguments.length; i++) args.push(arguments[i])\n      if (!self._hasParseCallback()) console.error.apply(console, args)\n      hasOutput = true\n      if (output.length) output += '\\n'\n      output += args.join(' ')\n    }\n  }\n  self._getLoggerInstance = () => _logger\n  // has yargs output an error our help\n  // message in the current execution context.\n  self._hasOutput = () => hasOutput\n\n  self._setHasOutput = () => {\n    hasOutput = true\n  }\n\n  let recommendCommands\n  self.recommendCommands = function (recommend) {\n    argsert('[boolean]', [recommend], arguments.length)\n    recommendCommands = typeof recommend === 'boolean' ? recommend : true\n    return self\n  }\n\n  self.getUsageInstance = () => usage\n\n  self.getValidationInstance = () => validation\n\n  self.getCommandInstance = () => command\n\n  self.terminalWidth = () => {\n    argsert([], 0)\n    return typeof process.stdout.columns !== 'undefined' ? process.stdout.columns : null\n  }\n\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  })\n\n  self._parseArgs = function parseArgs (args, shortCircuit, _skipValidation, commandIndex) {\n    let skipValidation = !!_skipValidation\n    args = args || processArgs\n\n    options.__ = y18n.__\n    options.configuration = self.getParserConfiguration()\n\n    // Deprecated\n    let pkgConfig = pkgUp()['yargs']\n    if (pkgConfig) {\n      console.warn('Configuring yargs through package.json is deprecated and will be removed in the next major release, please use the JS API instead.')\n      options.configuration = Object.assign({}, pkgConfig, options.configuration)\n    }\n\n    const parsed = Parser.detailed(args, options)\n    let argv = parsed.argv\n    if (parseContext) argv = Object.assign({}, argv, parseContext)\n    const aliases = parsed.aliases\n\n    argv.$0 = self.$0\n    self.parsed = parsed\n\n    try {\n      guessLocale() // guess locale lazily, so that it can be turned off in chain.\n\n      // while building up the argv object, there\n      // are two passes through the parser. If completion\n      // is being performed short-circuit on the first pass.\n      if (shortCircuit) {\n        return argv\n      }\n\n      // if there's a handler associated with a\n      // command defer processing to it.\n      if (helpOpt) {\n        // consider any multi-char helpOpt alias as a valid help command\n        // unless all helpOpt aliases are single-char\n        // note that parsed.aliases is a normalized bidirectional map :)\n        const helpCmds = [helpOpt]\n          .concat(aliases[helpOpt] || [])\n          .filter(k => k.length > 1)\n        // check if help should trigger and strip it from _.\n        if (~helpCmds.indexOf(argv._[argv._.length - 1])) {\n          argv._.pop()\n          argv[helpOpt] = true\n        }\n      }\n\n      const handlerKeys = command.getCommands()\n      const requestCompletions = completion.completionKey in argv\n      const skipRecommendation = argv[helpOpt] || requestCompletions\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0')\n\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand\n          for (let i = (commandIndex || 0), cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i])\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              // commands are executed using a recursive algorithm that executes\n              // the deepest command first; we keep track of the position in the\n              // argv._ array that is currently being executed.\n              return command.runCommand(cmd, self, parsed, i + 1)\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd\n              break\n            }\n          }\n\n          // run the default command, if defined\n          if (command.hasDefaultCommand() && !skipDefaultCommand) {\n            return command.runCommand(null, self, parsed)\n          }\n\n          // recommend a command if recommendCommands() has\n          // been enabled, and no commands were found to execute\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation.recommendCommands(firstUnknownCommand, handlerKeys)\n          }\n        }\n\n        // generate a completion script for adding to ~/.bashrc.\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true)\n          self.showCompletionScript()\n          self.exit(0)\n        }\n      } else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n        return command.runCommand(null, self, parsed)\n      }\n\n      // we must run completions first, a user might\n      // want to complete the --help or --version option.\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true)\n\n        // we allow for asynchronous completions,\n        // e.g., loading in a list of commands from an API.\n        const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1)\n        completion.getCompletion(completionArgs, (completions) => {\n          ;(completions || []).forEach((completion) => {\n            _logger.log(completion)\n          })\n\n          self.exit(0)\n        })\n        return argv\n      }\n\n      // Handle 'help' and 'version' options\n      // if we haven't already output help!\n      if (!hasOutput) {\n        Object.keys(argv).forEach((key) => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true)\n\n            skipValidation = true\n            self.showHelp('log')\n            self.exit(0)\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true)\n\n            skipValidation = true\n            usage.showVersion()\n            self.exit(0)\n          }\n        })\n      }\n\n      // Check if any of the options to skip validation were provided\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true)\n      }\n\n      // If the help or version options where used and exitProcess is false,\n      // or if explicitly skipped, we won't run validations.\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message)\n\n        // if we're executed via bash completion, don't\n        // bother with validation.\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error)\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage.fail(err.message, err)\n      else throw err\n    }\n\n    return argv\n  }\n\n  self._runValidation = function runValidation (argv, aliases, positionalMap, parseErrors) {\n    if (parseErrors) throw new YError(parseErrors.message || parseErrors)\n    validation.nonOptionCount(argv)\n    validation.requiredArguments(argv)\n    if (strict) validation.unknownArguments(argv, aliases, positionalMap)\n    validation.customChecks(argv, aliases)\n    validation.limitedChoices(argv)\n    validation.implications(argv)\n    validation.conflicting(argv)\n  }\n\n  function guessLocale () {\n    if (!detectLocale) return\n\n    try {\n      const { env } = process\n      const locale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE || 'en_US'\n      self.locale(locale.replace(/[.:].*/, ''))\n    } catch (err) {\n      // if we explode looking up locale just noop\n      // we'll keep using the default language 'en'.\n    }\n  }\n\n  // an app should almost always have --version and --help,\n  // if you *really* want to disable this use .help(false)/.version(false).\n  self.help()\n  self.version()\n\n  return self\n}\n\n// rebase an absolute path to a relative one with respect to a base directory\n// exported for tests\nexports.rebase = rebase\nfunction rebase (base, dir) {\n  return path.relative(base, dir)\n}\n"]},"metadata":{},"sourceType":"script"}