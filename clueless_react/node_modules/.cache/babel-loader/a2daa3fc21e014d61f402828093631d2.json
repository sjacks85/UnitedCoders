{"ast":null,"code":"var io = require('socket.io-client'); // Start socket and export it for others to use\n\n\nvar url = \"http://localhost:5000\";\nconst socket = io.connect(url);\nexport { socket }; // Called by App to join\n\nconst startClient = function (port) {\n  socket.on('connect', function () {\n    socket.emit('join', port);\n  });\n}; // Messages to server from client, called by user input\n\n\nfunction sendJoinGame(move, room) {\n  // create_game: (bool; true to start game)\n  // game_id: (int; ID of the game to join if joining active game)\n  // username: (string; player username)\n  // character: (int; ID of chosen character)\n  // player_id: (int; ID of player\n  var message = {\n    \"movement_made\": move,\n    \"movement_id\": room\n  }; //console.log('movement request: ' + move + room)    \n\n  console.log(\"sendJoinGame: \" + JSON.stringify(message));\n  socket.emit(2, message);\n} // Messages to server from client, called by user input\n\n\nfunction makeMovement(move, room) {\n  // “movement_made”:\n  // “movement_id”:\n  // }\n  // movement_made (bool) - True if the player has moved to a new location, false otherwise. \n  // new_location (int) - The unique ID of the chosen movement option. \n  var movement = {\n    \"movement_made\": move,\n    \"movement_id\": room\n  }; //console.log('movement request: ' + move + room)    \n\n  console.log(\"makeMovement: \" + JSON.stringify(movement));\n  socket.emit(41, movement);\n}\n\nfunction makeSuggestion(room, person, weapon) {\n  // “suggested_character”:\n  // “suggested_weapon”:\n  // }\n  // suggested_character (String) - The name of the character that was suggested.\n  // suggested_weapon (String) - The name ID if the weapon that was suggested.\n  var suggestion = {\n    \"suggested_room\": room,\n    \"suggested_character\": person,\n    \"suggested_weapon\": weapon\n  };\n  console.log('suggestion request: ' + room + person + weapon);\n  console.log(\"makeSuggestion: \" + JSON.stringify(suggestion));\n  socket.emit(42, suggestion);\n}\n\nfunction makeDisprove(disprove, card) {\n  // “suggestion_id”:\n  // “can_disprove”:\n  // “disprove_card”:\n  // }\n  // suggestion_id (int) - The unique ID of the suggestion being disproven.\n  // can_disprove (bool) - True if the suggestion is disproved, false otherwise.\n  // disprove_card (String) - The card used to disprove the suggestion; only populated if can_disprove is true.\n  var disprove = {\n    \"suggestion_id\": 0,\n    \"can_disprove\": disprove,\n    \"disprove_card\": card\n  }; //console.log('disprove request: ' + disprove + card)\n\n  console.log(\"makeDisprove: \" + JSON.stringify(disprove));\n  socket.emit(43, disprove);\n}\n\nfunction makeAccusation(accuse, room, person, weapon) {\n  // “accused_room”:\n  // “accused_character”:\n  // “accused_weapon”:\n  // }\n  // accused-room (String) - The name of the room that was accused. \n  // accused_character (String) - The name of the character that was accused.\n  // accused_weapon (String) - The name ID if the weapon that was accused.\n  var accusation = {\n    \"accuse_made\": accuse,\n    \"accused_room\": room,\n    \"accused_character\": person,\n    \"accused_weapon\": weapon\n  }; //console.log('accusation request: ' + accuse + person + weapon + room)\n\n  console.log(\"makeAccusation: \" + JSON.stringify(accusation));\n  socket.emit(44, accusation);\n}\n\nexport { startClient, sendJoinGame, makeMovement, makeSuggestion, makeDisprove, makeAccusation };","map":{"version":3,"sources":["/Users/kathryncrisafulli/Desktop/clueless_git/UnitedCoders/clueless_react/src/ClientManager.js"],"names":["io","require","url","socket","connect","startClient","port","on","emit","sendJoinGame","move","room","message","console","log","JSON","stringify","makeMovement","movement","makeSuggestion","person","weapon","suggestion","makeDisprove","disprove","card","makeAccusation","accuse","accusation"],"mappings":"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","sourcesContent":["var io = require('socket.io-client');\n\n// Start socket and export it for others to use\nvar url = \"http://localhost:5000\";\nconst socket = io.connect(url);\nexport { socket }\n\n// Called by App to join\nconst startClient = function(port) {\n\n    socket.on('connect', function () {\n        socket.emit('join', port);\n    });\n\n};\n\n// Messages to server from client, called by user input\nfunction sendJoinGame(move, room) {\n// create_game: (bool; true to start game)\n// game_id: (int; ID of the game to join if joining active game)\n// username: (string; player username)\n// character: (int; ID of chosen character)\n// player_id: (int; ID of player\n\n    \nvar message = {\n    \"movement_made\" : move,\n    \"movement_id\": room,\n};\n//console.log('movement request: ' + move + room)    \nconsole.log(\"sendJoinGame: \" + JSON.stringify(message));\nsocket.emit(2, message)\n}\n\n// Messages to server from client, called by user input\nfunction makeMovement(move, room) {\n\n        // “movement_made”:\n        // “movement_id”:\n        // }\n        // movement_made (bool) - True if the player has moved to a new location, false otherwise. \n        // new_location (int) - The unique ID of the chosen movement option. \n        \n    var movement = {\n        \"movement_made\" : move,\n        \"movement_id\": room,\n    };\n    //console.log('movement request: ' + move + room)    \n    console.log(\"makeMovement: \" + JSON.stringify(movement));\n    socket.emit(41, movement)\n}\n\nfunction makeSuggestion(room, person, weapon) {\n\n        // “suggested_character”:\n        // “suggested_weapon”:\n        // }\n        // suggested_character (String) - The name of the character that was suggested.\n        // suggested_weapon (String) - The name ID if the weapon that was suggested.\n        \n    var suggestion = {\n        \"suggested_room\": room,\n        \"suggested_character\": person,\n        \"suggested_weapon\": weapon\n    };\n    console.log('suggestion request: ' + room + person + weapon)\n    console.log(\"makeSuggestion: \" + JSON.stringify(suggestion));\n    socket.emit(42, suggestion);\n}\n\nfunction makeDisprove(disprove, card) {\n\n    // “suggestion_id”:\n    // “can_disprove”:\n    // “disprove_card”:\n    // }\n    // suggestion_id (int) - The unique ID of the suggestion being disproven.\n    // can_disprove (bool) - True if the suggestion is disproved, false otherwise.\n    // disprove_card (String) - The card used to disprove the suggestion; only populated if can_disprove is true.\n    \n    var disprove = {\n        \"suggestion_id\" : 0,\n        \"can_disprove\" : disprove,\n        \"disprove_card\" : card\n    }\n    //console.log('disprove request: ' + disprove + card)\n    console.log(\"makeDisprove: \" + JSON.stringify(disprove));\n    socket.emit(43, disprove);\n}\n\nfunction makeAccusation(accuse, room, person, weapon) {\n\n        // “accused_room”:\n        // “accused_character”:\n        // “accused_weapon”:\n        // }\n        // accused-room (String) - The name of the room that was accused. \n        // accused_character (String) - The name of the character that was accused.\n        // accused_weapon (String) - The name ID if the weapon that was accused.\n        \n    var accusation = {\n        \"accuse_made\": accuse,\n        \"accused_room\": room,\n        \"accused_character\": person,\n        \"accused_weapon\": weapon\n    };\n    //console.log('accusation request: ' + accuse + person + weapon + room)\n    console.log(\"makeAccusation: \" + JSON.stringify(accusation));\n    socket.emit(44, accusation);\n}\n\nexport { startClient, sendJoinGame, makeMovement, makeSuggestion, makeDisprove, makeAccusation };"]},"metadata":{},"sourceType":"module"}